{"version":3,"sources":["core/Ardublockly/type.js","core/Ardublockly/types.js","core/Ardublockly/static_typing.js","generators/arduino.js","generators/arduino/text.js","generators/arduino/procedures.js","generators/arduino/variables.js","generators/arduino/logic.js","generators/arduino/loops.js","generators/arduino/math.js","generators/arduino/arduino.js","generators/arduino/leaphy_extra.js","generators/arduino/leaphy_flitz.js","generators/arduino/leaphy_click.js","generators/arduino/leaphy_original.js","generators/arduino/leaphy_common.js","generators/arduino/all.js"],"names":["Blockly.Type","args","undefined","typeId","typeMsgName","compatibleTypes","Error","Array","isArray","typeMsgName_","compatibleTypes_","push","generatedCheckList_","generateCheckList_","Object","defineProperty","Blockly","Type","prototype","get","Msg","set","value","console","warn","Blockly.Type.prototype.generateCheckList_","compatibleType","i","length","unique","j","addCompatibleType","Blockly.Type.prototype.addCompatibleType","constructor","addCompatibleTypes","Blockly.Type.prototype.addCompatibleTypes","compatibleTypeArray","Types","CHARACTER","TEXT","BOOLEAN","SHORT_NUMBER","NUMBER","UNS_NUMBER","VOLATIL_NUMBER","LARGE_NUMBER","LARGE_UNS_NUMBER","DECIMAL","ARRAY","ARRAY_CHAR","NULL","UNDEF","CHILD_BLOCK_MISSING","addType","Blockly.Types.addType","typeId_","key","toUpperCase","replace","typeName","getValidTypeArray","Blockly.Types.getValidTypeArray","typesArray","typeKey","RegExp","getChildBlockType","Blockly.Types.getChildBlockType","block","nextBlock","getBlockType","inputList","connection","targetBlock","blockType","regExpInt_","regExpFloat_","identifyNumber","Blockly.Types.identifyNumber","numberString","test","intValue","parseInt","isNaN","StaticTyping","Blockly.StaticTyping","varTypeDict","create","pendingVarTypeDict","collectVarsWithTypes","Blockly.StaticTyping.prototype.collectVarsWithTypes","workspace","blocks","getAllStatementsOrdered","blockVarAndTypes","getBlockVars","variableName","variableType","substr","lastIndexOf","varAGI","arrayType","assignTypeToVars","Blockly.StaticTyping.getAllStatementsOrdered","getTopBlocks","getAllContinuousStatements","startBlock","blockNextConnection","nextConnection","connections","getConnections_","type","NEXT_STATEMENT","concat","allStatementBlocks","topBlocks","Blockly.StaticTyping.getBlockVars","getVars","blockVariables","call","varName","getVarType","varType","Blockly.StaticTyping.prototype.assignTypeToVars","setBlockTypeWarning","Blockly.StaticTyping.prototype.setBlockTypeWarning","setWarningText","warningLabel","MSG","varText1","varText2","varText3","varText4","varText5","setProcedureArgs","Blockly.StaticTyping.prototype.setProcedureArgs","length_","setArgsType","Variables","Generator","Names","NameType","Arduino","addReservedWords","ORDER_ATOMIC","ORDER_UNARY_POSTFIX","ORDER_UNARY_PREFIX","ORDER_MULTIPLICATIVE","ORDER_ADDITIVE","ORDER_SHIFT","ORDER_RELATIONAL","ORDER_EQUALITY","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_COMMA","ORDER_UNARY_NEGATION","ORDER_MEMBER","ORDER_NONE","PinTypes","INPUT","OUTPUT","PWM","SERVO","STEPPER","SERIAL","I2C","SPI","ORDER_OVERRIDES","ORDER_FUNCTION_CALL","ORDER_LOGICAL_NOT","ORDER_MULTIPLICATION","ORDER_ADDITION","DEF_FUNC_NAME","FUNCTION_NAME_PLACEHOLDER_","init","Arduino.init","getPrototypeOf","nameDB_","reset","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","getName","DEVELOPER_VARIABLE","variables","allUsedVarModels","getId","VARIABLE","definitions_","join","includes_","setups_","pins_","isInitialized","finish","Arduino.finish","code","includes","definitions","name","setups","userSetupCode","codeFunctions_","userFunctions_","functionNames_","allDefs","setup","loop","addInclude","Arduino.addInclude","includeTag","addDeclaration","Arduino.addDeclaration","declarationTag","addVariable","Arduino.addVariable","overwrite","overwritten","variables_","addSetup","Arduino.addSetup","setupTag","addFunction","Arduino.addFunction","preferedName","uniqueName","getDistinctName","NAME_TYPE","reservePin","Arduino.reservePin","pin","pinType","warningTag","ARD_PIN_WARN1","scrubNakedValue","Arduino.scrubNakedValue","line","quote_","Arduino.quote_","string","scrub_","Arduino.scrub_","commentCode","outputConnection","targetConnection","comment","getCommentText","prefixLines","x","INPUT_VALUE","childBlock","allNestedComments","nextCode","blockToCode","getArduinoType_","Arduino.getArduinoType_","typeBlockly","noGeneratorCodeInline","Arduino.noGeneratorCodeInline","noGeneratorCodeLine","Arduino.noGeneratorCodeLine","getFieldValue","funcName","PROCEDURE","branch","statementToCode","STATEMENT_PREFIX","id","INDENT","INFINITE_LOOP_TRAP","returnValue","valueToCode","arguments_","returnType","getReturnType","hasReturnValue_","setupBranch","getInputTargetBlock","goog","isString","argument0","n","argument","elseifCount_","elseCount_","operator","OPERATORS","order","argument1","defaultArgument","valueIf","valueThen","valueElse","repeats","Number","addLoopTrap","loopVar","endVar","match","isNumber","until","variable0","increment","up","parseFloat","step","Math","abs","startVar","incVar","Infinity","tuple","ADD","MINUS","MULTIPLY","DIVIDE","POWER","arg","substring","CONSTANTS","number_to_check","dropdown_property","func","divisor","argument2","functionName","math_random_int","random_function","includeDefinition","variablesDefinition","getColorDefinition","rgbColorSetupCode","colorType","leds","led","red","green","blue","dropdownType","pinKey","servoAngle","servoName","stateOutput","trigPin","echoPin","displayInclude","displayDefinition","displaySetup","displaySerialSetup","addDisplaySetupCode","row","sensor","axis","sensorType","flitz_red","flitz_green","flitz_blue","pin1","state1Output","pin2","state2Output","pin3","state3Output","dropdown_Type","speed","dropdown_pin","frequency","duration","exports","moduleExports"],"mappings":"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","file":"arduino_compressed.js","sourcesContent":["/**\r\n * @license Licensed under the Apache License, Version 2.0 (the \"License\"):\r\n *          http://www.apache.org/licenses/LICENSE-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Object that defines Types that can then be converted to\r\n *     language specific types in each language generator.\r\n */\r\n'use strict';\r\n\r\ngoog.provide('Blockly.Type');\r\n\r\n//goog.require('goog.asserts');\r\n\r\n\r\n/**\r\n * Blockly Type class constructor.\r\n * @param {Object} args Object/dictionary with typeId, typeMsgName, and\r\n *     compatibleTypes.\r\n * @constructor\r\n */\r\nBlockly.Type = function(args) {\r\n  if ((args.typeId === undefined) || (args.typeMsgName === undefined) ||\r\n      (args.compatibleTypes === undefined)) {\r\n    throw new Error('Creating a Type requires the following format:\\n{\\n' +\r\n                    '  typeId: string,\\n' +\r\n                    '  typeMsgName: Blockly.Msg string member var name to\\n' +\r\n                    '               identify the translatable Type name.\\n' +\r\n                    '  compatibleTypes: [Blockly.Type,]\\n}');\r\n  }\r\n  if (!Array.isArray(args.compatibleTypes)) {\r\n    throw new Error('The compatible types for a Blockly Types needs to be an ' +\r\n                    'array of Blockly.Type items.');\r\n  }\r\n  /** @type {string} */\r\n  this.typeId = args.typeId;\r\n  /** @type {string}\r\n   * This is the translatable Blockly.Msg member string name.\r\n   * @private\r\n   */\r\n  this.typeMsgName_ = args.typeMsgName;\r\n  /**\r\n   * @type {Array<Blockly.Type>} \r\n   * @private\r\n   */\r\n  this.compatibleTypes_ = args.compatibleTypes;\r\n  this.compatibleTypes_.push(this);\r\n  /**\r\n   * @type {Array<string>}\r\n   * @private\r\n   */\r\n  this.generatedCheckList_ = [];\r\n  this.generateCheckList_();\r\n};\r\n\r\n/** Getter for the typeName property, used for translatable Type naming. */\r\nObject.defineProperty(Blockly.Type.prototype, 'typeName', {\r\n  get: function() {\r\n    return Blockly.Msg[this.typeMsgName_] || this.typeId;\r\n  },\r\n  set: function(value) {\r\n    console.warn('\"Blockly.Type\" property \"typeName\" is not allowed to be set.');\r\n  }\r\n});\r\n\r\n/** Getter for the output property, used for block output types. */\r\nObject.defineProperty(Blockly.Type.prototype, 'output', {\r\n  get: function() {\r\n    return this.typeId;\r\n  },\r\n  set: function(value) {\r\n    console.warn('\"Blockly.Type\" property \"output\" is not allowed to be set.');\r\n  }\r\n});\r\n\r\n/** Getter for the check property, use for block input checks. */\r\nObject.defineProperty(Blockly.Type.prototype, 'checkList', {\r\n  get : function() {\r\n    return this.generatedCheckList_;\r\n  },\r\n  set: function(value) {\r\n    console.warn('\"Blockly.Type\" property \"check\" is not allowed to be set.');\r\n  }\r\n});\r\n\r\n/**\r\n * Generates the Type check list for the blocks input.\r\n * @param {!Blockly.Type} compatibleType New type to add to compatibility list.\r\n * @private\r\n */\r\nBlockly.Type.prototype.generateCheckList_ = function(compatibleType) {\r\n  this.generatedCheckList_ = [];\r\n  for (var i = 0; i < this.compatibleTypes_.length; i++) {\r\n    var unique = true;\r\n    for (var j = 0; j < this.generatedCheckList_.length; j++) {\r\n      if (this.generatedCheckList_[j] === this.compatibleTypes_[i].typeId) {\r\n        unique = false;\r\n      }\r\n    }\r\n    if (unique) {\r\n      this.generatedCheckList_.push(this.compatibleTypes_[i].typeId);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a new type to be compatible with this one.\r\n * @param {!Blockly.Type} compatibleType New type to add to compatibility list.\r\n */\r\nBlockly.Type.prototype.addCompatibleType = function(compatibleType) {\r\n  if (!compatibleType || !compatibleType.constructor ||\r\n      !(compatibleType instanceof Blockly.Type)) {\r\n    throw new Error('To add a compatible type to ' + this.typeId +\r\n                    ' provide a Blockly.Type object.');\r\n  }\r\n  this.compatibleTypes_.push(compatibleType);\r\n  this.generateCheckList_();\r\n};\r\n\r\n/**\r\n * Adds an array of new types to be compatible with this one.\r\n * @param {!Array<Blockly.Type>} compatibleTypeArray Array of new type to add to\r\n *     compatibility list.\r\n */\r\nBlockly.Type.prototype.addCompatibleTypes = function(compatibleTypeArray) {\r\n  if (!Array.isArray(compatibleTypeArray)) {\r\n    throw new Error('To add compatible types to the Blockly Type ' +\r\n                    this.typeId +' provide an array of Blockly.Type items.');\r\n  }\r\n  for (var i = 0; i < compatibleTypeArray.length; i++) {\r\n    if (!compatibleTypeArray[i] || !compatibleTypeArray[i].constructor ||\r\n        !(compatibleTypeArray[i] instanceof Blockly.Type)) {\r\n      throw new Error('To add a compatible type to ' + this.typeId + ' you ' +\r\n                      'must point to a Blockly.Type object.');\r\n    }\r\n    this.compatibleTypes_.push(compatibleTypeArray[i]);\r\n  }\r\n  this.generateCheckList_();\r\n};\r\n","/**\r\n * @license Licensed under the Apache License, Version 2.0 (the \"License\"):\r\n *          http://www.apache.org/licenses/LICENSE-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Blockly Types declarations and helper functions to identify\r\n *     types.\r\n */\r\n'use strict';\r\n\r\ngoog.provide('Blockly.Types');\r\n\r\ngoog.require('Blockly.Type');\r\n\r\n/** Single character. */\r\nBlockly.Types.CHARACTER = new Blockly.Type({\r\n  typeId: 'Character',\r\n  typeMsgName: 'ARD_TYPE_CHAR',\r\n  compatibleTypes: []\r\n});\r\n\r\n/** Text string. */\r\nBlockly.Types.TEXT = new Blockly.Type({\r\n  typeId: 'Text',\r\n  typeMsgName: 'ARD_TYPE_TEXT',\r\n  compatibleTypes: [Blockly.Types.CHARACTER]\r\n});\r\n\r\n/** Boolean. */\r\nBlockly.Types.BOOLEAN = new Blockly.Type({\r\n  typeId: 'Boolean',\r\n  typeMsgName: 'ARD_TYPE_BOOL',\r\n  compatibleTypes: []\r\n});\r\n\r\n/** Short integer number. */\r\nBlockly.Types.SHORT_NUMBER = new Blockly.Type({\r\n  typeId: 'Short Number',\r\n  typeMsgName: 'ARD_TYPE_SHORT',\r\n  compatibleTypes: []    // Circular dependencies, add after all declarations\r\n});\r\n\r\n/** Integer number. */\r\nBlockly.Types.NUMBER = new Blockly.Type({\r\n  typeId: 'Number',\r\n  typeMsgName: 'ARD_TYPE_NUMBER',\r\n  compatibleTypes: []    // Circular dependencies, add after all declarations\r\n});\r\n\r\n/** Unsigned integer number. */\r\nBlockly.Types.UNS_NUMBER = new Blockly.Type({\r\n  typeId: 'Unsigned number',\r\n  typeMsgName: 'ARD_TYPE_UNS_NUMBER',\r\n  compatibleTypes: [\r\n                    Blockly.Types.SHORT_NUMBER,\r\n                    Blockly.Types.NUMBER]    // Circular dependencies, add after all declarations\r\n});\r\n\r\n/** Volatile integer number. */\r\nBlockly.Types.VOLATIL_NUMBER = new Blockly.Type({\r\n  typeId: 'Volatil Number',\r\n  typeMsgName: 'ARD_TYPE_VOLATILE',\r\n  compatibleTypes: []    // Circular dependencies, add after all declarations\r\n});\r\n\r\n/** Large integer number. */\r\nBlockly.Types.LARGE_NUMBER = new Blockly.Type({\r\n  typeId: 'Large Number',\r\n  typeMsgName: 'ARD_TYPE_LONG',\r\n  compatibleTypes: []    // Circular dependencies, add after all declarations\r\n});\r\n\r\n/** Large unsigned integer number. */\r\nBlockly.Types.LARGE_UNS_NUMBER = new Blockly.Type({\r\n  typeId: 'Unisgned Large Number',\r\n  typeMsgName: 'ARD_TYPE_UNS_LONG',\r\n  compatibleTypes: [\r\n                    Blockly.Types.SHORT_NUMBER,\r\n                    Blockly.Types.NUMBER,\r\n                    Blockly.Types.LARGE_NUMBER]\r\n});\r\n\r\n/** Decimal/floating point number. */\r\nBlockly.Types.DECIMAL = new Blockly.Type({\r\n  typeId: 'Decimal',\r\n  typeMsgName: 'ARD_TYPE_DECIMAL',\r\n  compatibleTypes: [Blockly.Types.BOOLEAN,\r\n                    Blockly.Types.SHORT_NUMBER,\r\n                    Blockly.Types.NUMBER,\r\n                    Blockly.Types.LARGE_NUMBER]\r\n});\r\n\r\n/** Array/List of items. */\r\nBlockly.Types.ARRAY = new Blockly.Type({\r\n  typeId: 'Array',\r\n  typeMsgName: 'ARD_TYPE_ARRAY',\r\n  compatibleTypes: []\r\n});\r\n/** Array/List of character. */\r\nBlockly.Types.ARRAY_CHAR = new Blockly.Type({\r\n  typeId: 'ArrayChar',\r\n  typeMsgName: 'ARD_TYPE_ARRAY_CHAR',\r\n  compatibleTypes: []\r\n});\r\n\r\n/** Null indicate there is no type. */\r\nBlockly.Types.NULL = new Blockly.Type({\r\n  typeId: 'Null',\r\n  typeMsgName: 'ARD_TYPE_NULL',\r\n  compatibleTypes: []\r\n});\r\n\r\n/** Type not defined, or not yet defined. */\r\nBlockly.Types.UNDEF = new Blockly.Type({\r\n  typeId: 'Undefined',\r\n  typeMsgName: 'ARD_TYPE_UNDEF',\r\n  compatibleTypes: []\r\n});\r\n\r\n/** Set when no child block (meant to define the variable type) is connected. */\r\nBlockly.Types.CHILD_BLOCK_MISSING = new Blockly.Type({\r\n  typeId: 'ChildBlockMissing',\r\n  typeMsgName: 'ARD_TYPE_CHILDBLOCKMISSING',\r\n  compatibleTypes: []\r\n});\r\n\r\n/**\r\n * Some Types have circular dependencies on their compatibilities, so add them\r\n * after declaration.\r\n */\r\nBlockly.Types.NUMBER.addCompatibleTypes([\r\n    Blockly.Types.BOOLEAN,\r\n    Blockly.Types.SHORT_NUMBER,\r\n    Blockly.Types.LARGE_NUMBER,\r\n    Blockly.Types.DECIMAL]);\r\n\r\nBlockly.Types.UNS_NUMBER.addCompatibleTypes([\r\n    Blockly.Types.BOOLEAN,\r\n    Blockly.Types.SHORT_NUMBER,\r\n    Blockly.Types.NUMBER,\r\n    Blockly.Types.DECIMAL]);\r\n\r\nBlockly.Types.SHORT_NUMBER.addCompatibleTypes([\r\n    Blockly.Types.BOOLEAN,\r\n    Blockly.Types.NUMBER,\r\n    Blockly.Types.DECIMAL]);\r\n\r\nBlockly.Types.LARGE_NUMBER.addCompatibleTypes([\r\n    Blockly.Types.BOOLEAN,\r\n    Blockly.Types.SHORT_NUMBER,\r\n    Blockly.Types.UNS_NUMBER,\r\n    Blockly.Types.NUMBER,\r\n    Blockly.Types.DECIMAL]);\r\n\r\nBlockly.Types.LARGE_UNS_NUMBER.addCompatibleTypes([\r\n    Blockly.Types.BOOLEAN,\r\n    Blockly.Types.SHORT_NUMBER,\r\n    Blockly.Types.UNS_NUMBER,\r\n    Blockly.Types.NUMBER,\r\n    Blockly.Types.LARGE_NUMBER,\r\n    Blockly.Types.DECIMAL]);\r\n\t\r\nBlockly.Types.VOLATIL_NUMBER.addCompatibleTypes([\r\n    Blockly.Types.SHORT_NUMBER,\r\n    Blockly.Types.LARGE_NUMBER,\r\n    Blockly.Types.UNS_NUMBER,\r\n    Blockly.Types.NUMBER]);\r\n    \r\nBlockly.Types.ARRAY_CHAR.addCompatibleTypes([\r\n    Blockly.Types.CHARACTER,\r\n    Blockly.Types.TEXT]);\r\n\r\n/**\r\n * Adds another type to the Blockly.Types collection.\r\n * @param {string} typeId_ Identifiable name of the type.\r\n * @param {string} typeMsgName_ Name of the member variable from Blockly.Msg\r\n *     object to identify the translateble string.for the Type name.\r\n * @param {Array<Blockly.Type>} compatibleTypes_ List of types this Type is\r\n *     compatible with.\r\n */\r\nBlockly.Types.addType = function(typeId_, typeMsgName_, compatibleTypes_) {\r\n  // The Id is used as the key from the value pair in the BlocklyTypes object\r\n  var key = typeId_.toUpperCase().replace(/ /g, '_');\r\n  if (Blockly.Types[key] !== undefined) {\r\n    throw 'The Blockly type ' + key + ' already exists.';\r\n  }\r\n  Blockly.Types[key] = new Blockly.Type({\r\n    typeId: typeId_,\r\n    typeName: typeMsgName_,\r\n    compatibleTypes: compatibleTypes_\r\n  });\r\n};\r\n\r\n/**\r\n * Converts the static types dictionary in to a an array with 2-item arrays.\r\n * This array only contains the valid types, excluding any error or temp types.\r\n * @return {!Array<Array<string>>} Blockly types in the format described above.\r\n */\r\nBlockly.Types.getValidTypeArray = function() {\r\n  var typesArray = [];\r\n  for (var typeKey in Blockly.Types) {\r\n    if ((typeKey !== 'UNDEF') && (typeKey !== 'CHILD_BLOCK_MISSING') &&\r\n        (typeKey !== 'NULL') && (typeKey !== 'ARRAY') &&\r\n        (typeof Blockly.Types[typeKey] !== 'function') &&\r\n        !(Blockly.Types[typeKey] instanceof RegExp)) {\r\n      typesArray.push([Blockly.Types[typeKey].typeName, typeKey]);\r\n    }\r\n  }\r\n  return typesArray;\r\n};\r\n\r\n/**\r\n * Navigates through child blocks of the argument block to get this block type.\r\n * @param {!Blockly.Block} block Block to navigate through children.\r\n * @return {Blockly.Type} Type of the input block.\r\n */\r\nBlockly.Types.getChildBlockType = function(block) {\r\n  var blockType = null;\r\n  var nextBlock = block;\r\n  // Only checks first input block, so it decides the type. Incoherences amongst\r\n  // multiple inputs dealt at a per-block level with their own block warnings\r\n  while (nextBlock && (nextBlock.getBlockType === undefined) &&\r\n         (nextBlock.inputList.length > 0) && (nextBlock.inputList[0].connection != null)) {\r\n    nextBlock = nextBlock.inputList[0].connection.targetBlock();\r\n  }\r\n  if (nextBlock === block) {\r\n    // Set variable block is empty, so no type yet\r\n    blockType = Blockly.Types.CHILD_BLOCK_MISSING;\r\n  } else if (nextBlock === null) {\r\n    // Null return from targetBlock indicates no block connected\r\n    blockType = Blockly.Types.CHILD_BLOCK_MISSING;\r\n  } else {\r\n    var func = nextBlock.getBlockType;\r\n    if (func) {\r\n      blockType = nextBlock.getBlockType();\r\n    } else {\r\n      // Most inner block, supposed to define a type, is missing getBlockType()\r\n      blockType = Blockly.Types.NULL;\r\n    }\r\n  }\r\n  return blockType;\r\n};\r\n\r\n/**\r\n * Regular expressions to identify an integer.\r\n * @private\r\n */\r\nBlockly.Types.regExpInt_ = new RegExp(/^-?\\d+$/);\r\n\r\n/**\r\n * Regular expressions to identify a decimal.\r\n * @private\r\n */\r\nBlockly.Types.regExpFloat_ = new RegExp(/^-?[0-9]*[.][0-9]+$/);\r\n\r\n/**\r\n * Uses regular expressions to identify if the input number is an integer or a\r\n * floating point.\r\n * @param {string} numberString String of the number to identify.\r\n * @return {!Blockly.Type} Blockly type.\r\n */\r\nBlockly.Types.identifyNumber = function(numberString) {\r\n    if (Blockly.Types.regExpInt_.test(numberString)) {\r\n      var intValue = parseInt(numberString);\r\n      if (isNaN(intValue)) {\r\n        return Blockly.Types.NULL;\r\n      }\r\n      if (intValue > 32767 || intValue < -32768) {\r\n        return Blockly.Types.LARGE_NUMBER;\r\n      }\r\n      return Blockly.Types.NUMBER;\r\n    } else if (Blockly.Types.regExpFloat_.test(numberString)) {\r\n      return Blockly.Types.DECIMAL;\r\n    }\r\n    return Blockly.Types.NULL;\r\n};","/**\r\n * @license Licensed under the Apache License, Version 2.0 (the \"License\"):\r\n *          http://www.apache.org/licenses/LICENSE-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Object that defines static objects and methods to assign\r\n *     Blockly types to Blockly blocks. These can then be converted to language\r\n *     specific types in each language generator.\r\n */\r\n'use strict';\r\n\r\ngoog.provide('Blockly.StaticTyping');\r\n\r\ngoog.require('Blockly.Block');\r\ngoog.require('Blockly.Type');\r\ngoog.require('Blockly.Types');\r\ngoog.require('Blockly.Workspace');\r\n//goog.require('goog.asserts');\r\n\r\n/**\r\n * Class for Static Typing.\r\n * @constructor\r\n */\r\nBlockly.StaticTyping = function() {\r\n  this.varTypeDict = Object.create(null);\r\n  this.pendingVarTypeDict = Object.create(null);\r\n};\r\n\r\n/**\r\n * Navigates through all the statement blocks, collecting all variables and\r\n * their type into an associative array with the variable names as the keys and\r\n * the type as the values.\r\n * @param {Blockly.Workspace} workspace Blockly Workspace to collect variables.\r\n * @return {Object} Associative array with the variable names as the keys and the type as the values.\r\n */\r\nBlockly.StaticTyping.prototype.collectVarsWithTypes = function(workspace) {\r\n  this.varTypeDict = Object.create(null);\r\n  this.pendingVarTypeDict = Object.create(null);\r\n  var blocks = Blockly.StaticTyping.getAllStatementsOrdered(workspace);\r\n  for (var i = 0; i < blocks.length; i++) {\r\n    //blocks[i].select();  // for step debugging, highlights block in workspace\r\n    // Each statement block iterates through its input children collecting vars\r\n    var blockVarAndTypes = Blockly.StaticTyping.getBlockVars(blocks[i]);\r\n    for (var j = 0; j < blockVarAndTypes.length; j++) {\r\n      var variableName = blockVarAndTypes[j][0];\r\n      var variableType = blockVarAndTypes[j][1];\r\n      // If the type comes from a variable, so it's not directly defined, it\r\n      // returns an Array<String(block type), String(source variable name)>\r\n      if (Array.isArray(variableType)) {\r\n    \tif (variableType[1].substr(variableType[1].lastIndexOf('_')) == '_AGI') {\r\n    \t\t// if variable is the result of block \"array_getIndex\"\r\n    \t\t// his type is determined by the array type \r\n    \t\tvar varAGI = variableType[1].substr(0, variableType[1].lastIndexOf('_'));\r\n    \t\tvariableType = this.varTypeDict[varAGI];\r\n    \t\tif (!variableType) {\r\n    \t\t\tvariableType = Blockly.Types.UNDEF;\r\n    \t\t} else if (variableType.arrayType && variableType.arrayType.length == 2) {\r\n    \t\t\t// arrayType is a variable, so get his type\r\n\t\t\t\tvariableType = this.varTypeDict[variableType.arrayType[1]];\r\n    \t\t} else {\r\n    \t\t\t// the array type is stored in arrayType property\r\n    \t\t\tvariableType = variableType.arrayType;\r\n    \t\t}\r\n    \t} else {\r\n\t        if (this.varTypeDict[variableType[1]]) {\r\n\t          variableType = this.varTypeDict[variableType[1]];\r\n\t        } else {\r\n\t          // Dependant variable undefined, add this var to the pending list\r\n\t          if (!Array.isArray(this.pendingVarTypeDict[variableType[1]])) {\r\n\t            this.pendingVarTypeDict[variableType[1]] = [variableName];\r\n\t          } else {\r\n\t            this.pendingVarTypeDict[variableType[1]].push(variableName);\r\n\t          }\r\n\t          variableType = Blockly.Types.UNDEF;\r\n\t\t      }\r\n\t        }\r\n\t    }\r\n      this.assignTypeToVars(blocks[i], variableName, variableType);\r\n    }\r\n  }\r\n  return this.varTypeDict;\r\n};\r\n\r\n/**\r\n * Navigates through each top level block in the workspace to collect all\r\n * statement blocks, ordered from top left.\r\n * @param {Blockly.Workspace} workspace Blockly Workspace to collect blocks.\r\n * @return {Array<Blockly.Block>} Array containing all workspace statement\r\n *     blocks.\r\n */\r\nBlockly.StaticTyping.getAllStatementsOrdered = function(workspace) {\r\n  if (!workspace.getTopBlocks) {\r\n    throw 'Not a valid workspace: ' + workspace;\r\n  }\r\n\r\n  /**\r\n   * Navigates through each continuous block to collect all statement blocks.\r\n   * Function required to use recursion for block input statements.\r\n   * @param {Blockly.Block} startBlock Block to start iterating from..\r\n   * @return {Array<Blockly.Block>} Array containing all continuous statement\r\n   *     blocks.\r\n   */\r\n  var getAllContinuousStatements = function(startBlock) {\r\n    var block = startBlock;\r\n    var nextBlock = null;\r\n    var connections = null;\r\n    var blockNextConnection = null;\r\n    var blocks = [];\r\n    do {\r\n      //block.select();    // for step debugging, highlights block in workspace\r\n      blocks.push(block);\r\n      blockNextConnection = block.nextConnection;\r\n      connections = block.getConnections_();\r\n      block = null;\r\n      for (var j = 0; j < connections.length; j++) {\r\n        if (connections[j].type == Blockly.NEXT_STATEMENT) {\r\n          nextBlock = connections[j].targetBlock();\r\n          if (nextBlock) {\r\n            // If it is the next connection select it and move to the next block\r\n            if (connections[j] === blockNextConnection) {\r\n              block = nextBlock;\r\n            } else {\r\n              // Recursion as block children can have their own input statements\r\n              blocks = blocks.concat(getAllContinuousStatements(nextBlock));\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } while (block);\r\n\r\n    return blocks;\r\n  };\r\n\r\n  var allStatementBlocks = [];\r\n  var topBlocks = workspace.getTopBlocks(true);\r\n  for (var i = 0; i < topBlocks.length; i++) {\r\n    allStatementBlocks = allStatementBlocks.concat(\r\n        getAllContinuousStatements(topBlocks[i]));\r\n  }\r\n\r\n  return allStatementBlocks;\r\n};\r\n\r\n/**\r\n  * Retrieves the input argument block variables with their set type.\r\n  * @param {Blockly.Block} block Block to retrieve variables from.\r\n  * @return {Array<Array<String, Blockly.Type>>} Two dimensional array with the\r\n  *     block variable as the first item pair and variable type as the second.\r\n  */\r\nBlockly.StaticTyping.getBlockVars = function(block) {\r\n  var blockVarAndTypes = [];\r\n  var getVars = block.getVars;\r\n  if (getVars) {\r\n    var blockVariables = getVars.call(block);\r\n    // Iterate through the variables used in this block\r\n    for (var i = 0; i < blockVariables.length; i++) {\r\n      var varName = blockVariables[i];\r\n      var getVarType = block.getVarType;\r\n      if (getVarType) {\r\n        var varType = getVarType.call(block, varName);\r\n        blockVarAndTypes.push([varName, varType]);\r\n      } else {\r\n        blockVarAndTypes.push([varName, Blockly.Types.NULL]);\r\n      }\r\n    }\r\n  } // else: !(block.getVars), block does not define variables, so do nothing\r\n  return blockVarAndTypes;\r\n};\r\n\r\n/**\r\n * Manages the associative array of variables with their type.\r\n * @param {Blockly.Block} block Blockly providing the variable to manage.\r\n * @param {string} varName Name of the variable to manage.\r\n * @param {Blockly.Type} varType Type assigned by current block.\r\n */\r\nBlockly.StaticTyping.prototype.assignTypeToVars =\r\n    function(block, varName, varType) {\r\n  switch (this.varTypeDict[varName]) {\r\n    // First time variable is encountered, or previously undefined\r\n    case undefined:\r\n    case Blockly.Types.UNDEF:\r\n      this.varTypeDict[varName] = varType;\r\n      if ((varType != Blockly.Types.UNDEF) &&\r\n          (this.pendingVarTypeDict[varName] !== undefined)) {\r\n        for (var i = 0; i < this.pendingVarTypeDict[varName].length; i++) {\r\n          this.assignTypeToVars(\r\n              block, this.pendingVarTypeDict[varName][i], varType);\r\n        }\r\n      }\r\n      break;\r\n    // Variable with valid type already registered\r\n    default:\r\n      this.setBlockTypeWarning(\r\n          block, varType, varName, this.varTypeDict[varName]);\r\n      break;\r\n  }\r\n};\r\n\r\n/**\r\n * When a block uses a variable this function can compare its type with the\r\n * variable type and set a warning if they are not the same or compatible.\r\n * @param {!Blockly.Block} block The block to manage its warning.\r\n * @param {!Blockly.Type} blockType The type of this block.\r\n * @param {!string} varName The variable name.\r\n */\r\nBlockly.StaticTyping.prototype.setBlockTypeWarning =\r\n    function(block, blockType, varName) {\r\n  var warningLabel = 'varType';\r\n  if ((blockType == Blockly.Types.CHILD_BLOCK_MISSING) ||\r\n      (this.varTypeDict[varName] == Blockly.Types.CHILD_BLOCK_MISSING)) {\r\n    // User still has to attach a block to this variable or its first\r\n    // declaration, so for now do not display any warning\r\n    block.setWarningText(null, warningLabel);\r\n  } else if ((this.varTypeDict[varName] !== blockType) &&\r\n             (blockType !== Blockly.Types.UNDEF)) {\r\n    block.setWarningText(MSG.varText1 + varName + MSG.varText2 + this.varTypeDict[varName].typeName + MSG.varText3 +\r\n        MSG.varText4 + blockType.typeName + MSG.varText5,\r\n        warningLabel);\r\n  } else {\r\n    block.setWarningText(null, warningLabel);\r\n  }\r\n};\r\n\r\n/**\r\n * Iterates through the list of top level blocks and sets the function arguments\r\n * types.\r\n * @param {Blockly.Workspace} workspace Blockly Workspace to collect variables.\r\n */\r\nBlockly.StaticTyping.prototype.setProcedureArgs = function(workspace) {\r\n  var blocks = workspace.getTopBlocks();\r\n  for (var i = 0, length_ = blocks.length; i < length_; i++) {\r\n    var setArgsType = blocks[i].setArgsType;\r\n    if (setArgsType) {\r\n      setArgsType.call(blocks[i], this.varTypeDict);\r\n    }\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Helper functions for generating Arduino for blocks.\r\n * @author gasolin@gmail.com (Fred Lin)\r\n * reboot scanet@libreduc.cc (SebCanet)\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino');\r\n\r\nconst Variables = goog.require('Blockly.Variables');\r\nconst { Generator } = goog.require('Blockly.Generator');\r\ngoog.require('Blockly.StaticTyping');\r\nconst { Names, NameType } = goog.require('Blockly.Names');\r\n\r\n/**\r\n * Arduino code generator.\r\n * @type {!Blockly.Generator}\r\n */\r\nconst Arduino = new Generator('Arduino');\r\n\r\n/**\r\n * List of illegal variable names.\r\n * This is not intended to be a security feature.  Blockly is 100% client-side,\r\n * so bypassing this list is trivial.  This is intended to prevent users from\r\n * accidentally clobbering a built-in object or function.\r\n * Arduino specific keywords defined in: http://arduino.cc/en/Reference/HomePage\r\n * @private\r\n */\r\nArduino.addReservedWords(\r\n  'Blockly,' +  // In case JS is evaled in the current window.\r\n  'setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,' +\r\n  'define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,integer,' +\r\n  'constants,floating,point,void,boolean,char,unsigned,byte,int,word,long,' +\r\n  'float,double,string,String,array,static,volatile,const,sizeof,pinMode,' +\r\n  'digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,' +\r\n  'noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,' +\r\n  'min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,' +\r\n  'lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,' +\r\n  'detachInterrupt,interrupts,noInterrupts');\r\n\r\n/** Order of operation ENUMs. */\r\nArduino.ORDER_ATOMIC = 0;         // 0 \"\" ...\r\nArduino.ORDER_UNARY_POSTFIX = 1;  // expr++ expr-- () [] .\r\nArduino.ORDER_UNARY_PREFIX = 2;   // -expr !expr ~expr ++expr --expr\r\nArduino.ORDER_MULTIPLICATIVE = 3; // * / % ~/\r\nArduino.ORDER_ADDITIVE = 4;       // + -\r\nArduino.ORDER_SHIFT = 5;          // << >>\r\nArduino.ORDER_RELATIONAL = 6;     // is is! >= > <= <\r\nArduino.ORDER_EQUALITY = 7;       // == != === !==\r\nArduino.ORDER_BITWISE_AND = 8;    // &\r\nArduino.ORDER_BITWISE_XOR = 9;    // ^\r\nArduino.ORDER_BITWISE_OR = 10;    // |\r\nArduino.ORDER_LOGICAL_AND = 11;   // &&\r\nArduino.ORDER_LOGICAL_OR = 12;    // ||\r\nArduino.ORDER_CONDITIONAL = 13;   // expr ? expr : expr\r\nArduino.ORDER_ASSIGNMENT = 14;    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\r\nArduino.ORDER_COMMA = 15;    // ,\r\nArduino.ORDER_UNARY_NEGATION = 16;\r\nArduino.ORDER_MEMBER = 17;\r\nArduino.ORDER_NONE = 99;          // (...)\r\n\r\n/**\r\n * A list of types tasks that the pins can be assigned. Used to track usage and\r\n * warn if the same pin has been assigned to more than one task.\r\n */\r\nArduino.PinTypes = {\r\n  INPUT: 'INPUT',\r\n  OUTPUT: 'OUTPUT',\r\n  PWM: 'PWM',\r\n  SERVO: 'SERVO',\r\n  STEPPER: 'STEPPER',\r\n  SERIAL: 'SERIAL',\r\n  I2C: 'I2C/TWI',\r\n  SPI: 'SPI'\r\n};\r\nArduino.ORDER_OVERRIDES = [\r\n  // (foo()).bar -> foo().bar\r\n  // (foo())[0] -> foo()[0]\r\n  [Arduino.ORDER_FUNCTION_CALL, Arduino.ORDER_MEMBER],\r\n  // (foo())() -> foo()()\r\n  [Arduino.ORDER_FUNCTION_CALL, Arduino.ORDER_FUNCTION_CALL],\r\n  // (foo.bar).baz -> foo.bar.baz\r\n  // (foo.bar)[0] -> foo.bar[0]\r\n  // (foo[0]).bar -> foo[0].bar\r\n  // (foo[0])[1] -> foo[0][1]\r\n  [Arduino.ORDER_MEMBER, Arduino.ORDER_MEMBER],\r\n  // (foo.bar)() -> foo.bar()\r\n  // (foo[0])() -> foo[0]()\r\n  [Arduino.ORDER_MEMBER, Arduino.ORDER_FUNCTION_CALL],\r\n  // !(!foo) -> !!foo\r\n  [Arduino.ORDER_LOGICAL_NOT, Arduino.ORDER_LOGICAL_NOT],\r\n  // a * (b * c) -> a * b * c\r\n  [Arduino.ORDER_MULTIPLICATION, Arduino.ORDER_MULTIPLICATION],\r\n  // a + (b + c) -> a + b + c\r\n  [Arduino.ORDER_ADDITION, Arduino.ORDER_ADDITION],\r\n  // a && (b && c) -> a && b && c\r\n  [Arduino.ORDER_LOGICAL_AND, Arduino.ORDER_LOGICAL_AND],\r\n  // a || (b || c) -> a || b || c\r\n  [Arduino.ORDER_LOGICAL_OR, Arduino.ORDER_LOGICAL_OR]\r\n];\r\n\r\n/**\r\n * Arduino generator short name for\r\n * Blockly.Generator.prototype.FUNCTION_NAME_PLACEHOLDER_\r\n * @type {!string}\r\n */\r\nArduino.DEF_FUNC_NAME = Arduino.FUNCTION_NAME_PLACEHOLDER_;\r\n\r\n/**\r\n * Initialises the database of global definitions, the setup function, function\r\n * names, and variable names.\r\n * @param {Blockly.Workspace} workspace Workspace to generate code from.\r\n */\r\nArduino.init = function (workspace) {\r\n\r\n  // Call Blockly.Generator's init.\r\n  Object.getPrototypeOf(this).init.call(this);\r\n\r\n  if (!this.nameDB_) {\r\n    this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n  } else {\r\n    this.nameDB_.reset();\r\n  }\r\n\r\n  Arduino.nameDB_.setVariableMap(workspace.getVariableMap());\r\n  this.nameDB_.populateVariables(workspace);\r\n  this.nameDB_.populateProcedures(workspace);\r\n\r\n  const defvars = [];\r\n  // Add developer variables (not created or named by the user).\r\n  const devVarList = Variables.allDeveloperVariables(workspace);\r\n  for (let i = 0; i < devVarList.length; i++) {\r\n    defvars.push(this.nameDB_.getName(devVarList[i],\r\n      NameType.DEVELOPER_VARIABLE));\r\n  }\r\n\r\n  // Add user variables, but only ones that are being used.\r\n  const variables = Variables.allUsedVarModels(workspace);\r\n  for (let i = 0; i < variables.length; i++) {\r\n    defvars.push(this.nameDB_.getName(variables[i].getId(),\r\n      NameType.VARIABLE));\r\n  }\r\n\r\n  // Declare all of the variables.\r\n  if (defvars.length) {\r\n    this.definitions_['variables'] =\r\n      'double ' + defvars.join(' = 0, ') + ' = 0;\\n';\r\n  }\r\n\r\n  // Create a dictionary of definitions to be printed at the top of the sketch\r\n  this.includes_ = Object.create(null);\r\n  // Create a dictionary of setups to be printed in the setup() function\r\n  this.setups_ = Object.create(null);\r\n  // Create a dictionary of pins to check if their use conflicts\r\n  this.pins_ = Object.create(null);\r\n\r\n  this.isInitialized = true;\r\n};\r\n\r\n/**\r\n * Prepare all generated code to be placed in the sketch specific locations.\r\n * @param {string} code Generated main program (loop function) code.\r\n * @return {string} Completed sketch code.\r\n */\r\nArduino.finish = function (code) {\r\n  // Convert the includes, definitions, and functions dictionaries into lists\r\n  var includes = [], definitions = [], variables = [], functions = [];\r\n  for (var name in Arduino.includes_) {\r\n    includes.push(Arduino.includes_[name]);\r\n  }\r\n  if (includes.length) {\r\n    includes.push('\\n');\r\n  }\r\n  for (var name in this.definitions_) {\r\n    definitions.push(Arduino.definitions_[name]);\r\n  }\r\n  if (definitions.length) {\r\n    definitions.push('\\n');\r\n  }\r\n  \r\n  // userSetupCode added at the end of the setup function without leading spaces\r\n  var setups = [''], userSetupCode = '';\r\n  if (Arduino.setups_['userSetupCode'] !== undefined) {\r\n    userSetupCode = '\\n  ' + Arduino.setups_['userSetupCode'];\r\n    delete Arduino.setups_['userSetupCode'];\r\n  }\r\n  for (var name in Arduino.setups_) {\r\n    setups.push(Arduino.setups_[name]);\r\n  }\r\n  if (userSetupCode) {\r\n    setups.push(userSetupCode);\r\n  }\r\n\r\n  // Clean up temporary data\r\n  delete Arduino.includes_;\r\n  delete Arduino.definitions_;\r\n  delete Arduino.codeFunctions_;\r\n  delete Arduino.userFunctions_;\r\n  delete Arduino.functionNames_;\r\n  delete Arduino.setups_;\r\n  delete Arduino.pins_;\r\n  this.nameDB_.reset();\r\n\r\n  var allDefs = includes.join('\\n') + definitions.join('\\n') + variables.join('\\n') + functions.join('\\n\\n');\r\n  var setup = 'void setup() {' + setups.join('\\n  ') + '\\n}\\n\\n';\r\n  var loop = 'void loop() {\\n  ' + code.replace(/\\n/g, '\\n  ') + '\\n}';\r\n  return allDefs + setup + loop;\r\n};\r\n\r\n/**\r\n * Adds a string of \"include\" code to be added to the sketch.\r\n * Once a include is added it will not get overwritten with new code.\r\n * @param {!string} includeTag Identifier for this include code.\r\n * @param {!string} code Code to be included at the very top of the sketch.\r\n */\r\nArduino.addInclude = function (includeTag, code) {\r\n  if (Arduino.includes_[includeTag] === undefined) {\r\n    Arduino.includes_[includeTag] = code;\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a string of code to be declared globally to the sketch.\r\n * Once it is added it will not get overwritten with new code.\r\n * @param {!string} declarationTag Identifier for this declaration code.\r\n * @param {!string} code Code to be added below the includes.\r\n */\r\nArduino.addDeclaration = function (declarationTag, code) {\r\n  if (Arduino.definitions_[declarationTag] === undefined) {\r\n    Arduino.definitions_[declarationTag] = code;\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a string of code to declare a variable globally to the sketch.\r\n * Only if overwrite option is set to true it will overwrite whatever\r\n * value the identifier held before.\r\n * @param {!string} varName The name of the variable to declare.\r\n * @param {!string} code Code to be added for the declaration.\r\n * @param {boolean=} overwrite Flag to ignore previously set value.\r\n * @return {!boolean} Indicates if the declaration overwrote a previous one.\r\n */\r\n Arduino.addVariable = function (varName, code, overwrite) {\r\n  var overwritten = false;\r\n  if (overwrite || (Arduino.variables_[varName] === undefined)) {\r\n    Arduino.variables_[varName] = code;\r\n    overwritten = true;\r\n  }\r\n  return overwritten;\r\n};\r\n\r\n/**\r\n * Adds a string of code into the Arduino setup() function. It takes an\r\n * identifier to not repeat the same kind of initialisation code from several\r\n * blocks. If overwrite option is set to true it will overwrite whatever\r\n * value the identifier held before.\r\n * @param {!string} setupTag Identifier for the type of set up code.\r\n * @param {!string} code Code to be included in the setup() function.\r\n * @param {boolean=} overwrite Flag to ignore previously set value.\r\n * @return {!boolean} Indicates if the new setup code overwrote a previous one.\r\n */\r\nArduino.addSetup = function (setupTag, code, overwrite) {\r\n  var overwritten = false;\r\n  if (overwrite || (Arduino.setups_[setupTag] === undefined)) {\r\n    Arduino.setups_[setupTag] = code;\r\n    overwritten = true;\r\n  }\r\n  return overwritten;\r\n};\r\n\r\n/**\r\n * Adds a string of code as a function. It takes an identifier (meant to be the\r\n * function name) to only keep a single copy even if multiple blocks might\r\n * request this function to be created.\r\n * A function (and its code) will only be added on first request.\r\n * @param {!string} preferedName Identifier for the function.\r\n * @param {!string} code Code to be included in the setup() function.\r\n * @return {!string} A unique function name based on input name.\r\n */\r\nArduino.addFunction = function (preferedName, code) {\r\n  if (Arduino.codeFunctions_[preferedName] === undefined) {\r\n    var uniqueName = this.nameDB_.getDistinctName(\r\n      preferedName, Blockly.Generator.NAME_TYPE);\r\n    Arduino.codeFunctions_[preferedName] =\r\n      code.replace(Arduino.DEF_FUNC_NAME, uniqueName);\r\n    Arduino.functionNames_[preferedName] = uniqueName;\r\n  }\r\n  return Arduino.functionNames_[preferedName];\r\n};\r\n\r\n/**\r\n * Description.\r\n * @param {!Blockly.Block} block Description.\r\n * @param {!string} pin Description.\r\n * @param {!string} pinType Description.\r\n * @param {!string} warningTag Description.\r\n */\r\nArduino.reservePin = function (block, pin, pinType, warningTag) {\r\n  if (Arduino.pins_[pin] !== undefined) {\r\n    if (Arduino.pins_[pin] != pinType) {\r\n      block.setWarningText(Blockly.Msg.ARD_PIN_WARN1.replace('%1', pin)\r\n        .replace('%2', warningTag).replace('%3', pinType)\r\n        .replace('%4', Arduino.pins_[pin]), warningTag);\r\n    } else {\r\n      block.setWarningText(null, warningTag);\r\n    }\r\n  } else {\r\n    Arduino.pins_[pin] = pinType;\r\n    block.setWarningText(null, warningTag);\r\n  }\r\n};\r\n\r\n/**\r\n * Naked values are top-level blocks with outputs that aren't plugged into\r\n * anything. A trailing semicolon is needed to make this legal.\r\n * @param {string} line Line of generated code.\r\n * @return {string} Legal line of code.\r\n */\r\nArduino.scrubNakedValue = function (line) {\r\n  return line + ';\\n';\r\n};\r\n\r\n/**\r\n * Encode a string as a properly escaped Arduino string, complete with quotes.\r\n * @param {string} string Text to encode.\r\n * @return {string} Arduino string.\r\n * @private\r\n */\r\nArduino.quote_ = function (string) {\r\n  // TODO: This is a quick hack.  Replace with goog.string.quote\r\n  string = string.replace(/\\\\/g, '\\\\\\\\')\r\n    .replace(/\\n/g, '\\\\\\n')\r\n    .replace(/\\$/g, '\\\\$')\r\n    .replace(/'/g, '\\\\\\'');\r\n  return '\\\"' + string + '\\\"';\r\n};\r\n\r\n/**\r\n * Common tasks for generating Arduino from blocks.\r\n * Handles comments for the specified block and any connected value blocks.\r\n * Calls any statements following this block.\r\n * @param {!Blockly.Block} block The current block.\r\n * @param {string} code The Arduino code created for this block.\r\n * @return {string} Arduino code with comments and subsequent blocks added.\r\n * @this {Blockly.CodeGenerator}\r\n * @private\r\n */\r\nArduino.scrub_ = function (block, code) {\r\n  if (code === null) {\r\n    // Block has handled code generation itself.\r\n    return '';\r\n  }\r\n  var commentCode = '';\r\n  // Only collect comments for blocks that aren't inline.\r\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n    // Collect comment for this block.\r\n    var comment = block.getCommentText();\r\n    if (comment) {\r\n      commentCode += this.prefixLines(comment, '// ') + '\\n';\r\n    }\r\n    // Collect comments for all value arguments.\r\n    // Don't collect comments for nested statements.\r\n    for (var x = 0; x < block.inputList.length; x++) {\r\n      if (block.inputList[x].type == Blockly.INPUT_VALUE) {\r\n        var childBlock = block.inputList[x].connection.targetBlock();\r\n        if (childBlock) {\r\n          var comment = this.allNestedComments(childBlock);\r\n          if (comment) {\r\n            commentCode += this.prefixLines(comment, '// ');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\r\n  var nextCode = this.blockToCode(nextBlock);\r\n  return commentCode + code + nextCode;\r\n};\r\n\r\n/**\r\n * Generates Arduino Types from a Blockly Type.\r\n * @param {!Blockly.Type} typeBlockly The Blockly type to be converted.\r\n * @return {string} Arduino type for the respective Blockly input type, in a\r\n *     string format.\r\n * @private\r\n */\r\nArduino.getArduinoType_ = function (typeBlockly) {\r\n  switch (typeBlockly.typeId) {\r\n    case Blockly.Types.VOLATIL_NUMBER.typeId:\r\n      return 'volatile int';\r\n    case Blockly.Types.SHORT_NUMBER.typeId:\r\n      return 'byte';\r\n    case Blockly.Types.NUMBER.typeId:\r\n      return 'int';\r\n    case Blockly.Types.UNS_NUMBER.typeId:\r\n      return 'unsigned int';\r\n    case Blockly.Types.LARGE_NUMBER.typeId:\r\n      return 'long';\r\n    case Blockly.Types.LARGE_UNS_NUMBER.typeId:\r\n      return 'unsigned long';\r\n    case Blockly.Types.DECIMAL.typeId:\r\n      return 'float';\r\n    case Blockly.Types.TEXT.typeId:\r\n      return 'String';\r\n    case Blockly.Types.CHARACTER.typeId:\r\n      return 'char';\r\n    case Blockly.Types.ARRAY_CHAR.typeId:\r\n      return 'char*';\r\n    case Blockly.Types.BOOLEAN.typeId:\r\n      return 'boolean';\r\n    case Blockly.Types.NULL.typeId:\r\n      //return 'void';\r\n      // TODO: Find a more elegant way to default to double type\r\n      // This could be by removing StaticTyping completely from Leaphy Blockly\r\n      return 'double';\r\n    case Blockly.Types.ARRAY.typeId:\r\n      return Arduino.getArduinoType_(typeBlockly.arrayType);\r\n    case Blockly.Types.UNDEF.typeId:\r\n      return 'undefined';\r\n    case Blockly.Types.CHILD_BLOCK_MISSING.typeId:\r\n      // If no block connected default to int, change for easier debugging\r\n      //return 'ChildBlockMissing';\r\n      return 'int';\r\n    default:\r\n      return 'Invalid Blockly Type';\r\n  }\r\n};\r\n\r\n/** Used for not-yet-implemented block code generators */\r\nArduino.noGeneratorCodeInline = function () {\r\n  return ['', Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino.noGeneratorCodeLine = function () {\r\n  return '';\r\n};\r\n\r\nexports.arduinoGenerator = Arduino;\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for text blocks.\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino.text');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n\r\n/**\r\n* Code generator for a literal String (X).\r\n* Arduino code: loop { \"X\" }\r\n* @param {!Blockly.Block} block Block to generate the code from.\r\n* @return {array} Completed code with order of operation.\r\n*/\r\nArduino['text'] = function (block) {\r\n    var code = Arduino.quote_(block.getFieldValue('TEXT'));\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Procedure blocks.\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino.procedures');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\nconst { NameType } = goog.require('Blockly.Names');\r\n\r\n/**\r\n * Code generator to create a function with a return value (X).\r\n * Arduino code: void functionname { return X }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {null} There is no code added to loop.\r\n */\r\nArduino['procedures_defreturn'] = function (block) {\r\n    var funcName = Arduino.nameDB_.getName(\r\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\r\n    var branch = Arduino.statementToCode(block, 'STACK');\r\n    if (Arduino.STATEMENT_PREFIX) {\r\n        branch = Arduino.prefixLines(\r\n            Arduino.STATEMENT_PREFIX.replace(/%1/g,\r\n                '\\'' + block.id + '\\''), Arduino.INDENT) + branch;\r\n    }\r\n    if (Arduino.INFINITE_LOOP_TRAP) {\r\n        branch = Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n            '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnValue = Arduino.valueToCode(block, 'RETURN',\r\n        Arduino.ORDER_NONE) || '';\r\n    if (returnValue) {\r\n        returnValue = '  return ' + returnValue + ';\\n';\r\n    }\r\n\r\n    // Get arguments with type\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n        args[x] =\r\n            'double' +\r\n            ' ' +\r\n            Arduino.nameDB_.getName(block.arguments_[x],\r\n                NameType.VARIABLE);\r\n    }\r\n\r\n    // Get return type\r\n    var returnType = Blockly.Types.NULL;\r\n    if (block.getReturnType) {\r\n        returnType = block.getReturnType();\r\n    }\r\n    returnType = Arduino.getArduinoType_(returnType);\r\n\r\n    // Construct code\r\n    var code = returnType + ' ' + funcName + '(' + args.join(', ') + ') {\\n' +\r\n        branch + returnValue + '}';\r\n    code = Arduino.scrub_(block, code);\r\n    Arduino.definitions_[funcName] = code;\r\n    return null;\r\n};\r\n\r\n/**\r\n * Code generator to create a function without a return value.\r\n * It uses the same code as with return value, as it will maintain the void\r\n * type.\r\n * Arduino code: void functionname { }\r\n */\r\nArduino['procedures_defnoreturn'] =\r\n    Arduino['procedures_defreturn'];\r\n\r\n/**\r\n * Code generator to create a function call with a return value.\r\n * Arduino code: loop { functionname() }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['procedures_callreturn'] = function (block) {\r\n    var funcName = Arduino.nameDB_.getName(\r\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n        args[x] = Arduino.valueToCode(block, 'ARG' + x,\r\n            Arduino.ORDER_NONE) || 'null';\r\n    }\r\n    var code = funcName + '(' + args.join(', ') + ')';\r\n    return [code, Arduino.ORDER_UNARY_POSTFIX];\r\n};\r\n\r\n/**\r\n * Code generator to create a function call without a return value.\r\n * Arduino code: loop { functionname() }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['procedures_callnoreturn'] = function (block) {\r\n    var funcName = Arduino.nameDB_.getName(\r\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\r\n    var args = [];\r\n    for (var x = 0; x < block.arguments_.length; x++) {\r\n        args[x] = Arduino.valueToCode(block, 'ARG' + x,\r\n            Arduino.ORDER_NONE) || 'null';\r\n    }\r\n    var code = funcName + '(' + args.join(', ') + ');\\n';\r\n    return code;\r\n};\r\n\r\n/**\r\n * Code generator to create a conditional (X) return value (Y) for a function.\r\n * Arduino code: if (X) { return Y; }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['procedures_ifreturn'] = function (block) {\r\n    var condition = Arduino.valueToCode(block, 'CONDITION',\r\n        Arduino.ORDER_NONE) || 'false';\r\n    var code = 'if (' + condition + ') {\\n';\r\n    if (block.hasReturnValue_) {\r\n        var value = Arduino.valueToCode(block, 'VALUE',\r\n            Arduino.ORDER_NONE) || 'null';\r\n        code += '  return ' + value + ';\\n';\r\n    } else {\r\n        code += '  return;\\n';\r\n    }\r\n    code += '}\\n';\r\n    return code;\r\n};\r\n\r\n/**\r\n * Code generator to add code into the setup() and loop() functions.\r\n * Its use is not mandatory, but necessary to add manual code to setup().\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['arduino_functions'] = function (block) {\r\n    // Edited version of Blockly.Generator.prototype.statementToCode\r\n    function statementToCodeNoTab(block, name) {\r\n        var targetBlock = block.getInputTargetBlock(name);\r\n        var code = Arduino.blockToCode(targetBlock);\r\n        if (!goog.isString(code)) {\r\n            throw 'Expecting code from statement block \"' + targetBlock.type + '\".';\r\n        }\r\n        return code;\r\n    }\r\n\r\n    var setupBranch = Arduino.statementToCode(block, 'SETUP_FUNC');\r\n    //var setupCode = Arduino.scrub_(block, setupBranch); No comment block\r\n    if (setupBranch) {\r\n        Arduino.addSetup('userSetupCode', setupBranch, true);\r\n    }\r\n\r\n    var loopBranch = statementToCodeNoTab(block, 'LOOP_FUNC');\r\n    //var loopcode = Arduino.scrub_(block, loopBranch); No comment block\r\n    return loopBranch;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Variable blocks.\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino.variables');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\nconst {NameType} = goog.require('Blockly.Names');\r\n\r\n/**\r\n * Code generator for variable (X) getter.\r\n * Arduino code: loop { X }\r\n * @param {Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['variables_get'] = function (block) {\r\n\r\n    var varName = Arduino.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\r\n    return [varName, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\n/**\r\n * Code generator for variable (X) setter (Y).\r\n * Arduino code: type X;\r\n *               loop { X = Y; }\r\n * @param {Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['variables_set'] = function (block) {\r\n\r\n    var argument0 = Arduino.valueToCode(block, 'VALUE', Arduino.ORDER_ASSIGNMENT) || '0';\r\n    var varName = Arduino.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\r\n\r\n    return varName + ' = ' + argument0 + ';\\n';\r\n};","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for logic blocks.\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino.logic');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n\r\n\r\n/**\r\n * Code generator to create if/if else/else statement.\r\n * Arduino code: loop { if (X)/else if ()/else { X } }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_if'] = function (block) {\r\n  var n = 0;\r\n  var argument = Arduino.valueToCode(block, 'IF' + n,\r\n    Arduino.ORDER_NONE) || 'false';\r\n  var branch = Arduino.statementToCode(block, 'DO' + n);\r\n  var code = 'if (' + argument + ') {\\n' + branch + '}';\r\n  for (n = 1; n <= block.elseifCount_; n++) {\r\n    argument = Arduino.valueToCode(block, 'IF' + n,\r\n      Arduino.ORDER_NONE) || 'false';\r\n    branch = Arduino.statementToCode(block, 'DO' + n);\r\n    code += ' else if (' + argument + ') {\\n' + branch + '}';\r\n  }\r\n  if (block.elseCount_) {\r\n    branch = Arduino.statementToCode(block, 'ELSE');\r\n    code += ' else {\\n' + branch + '}';\r\n  }\r\n  return code + '\\n';\r\n};\r\n\r\n/**\r\n * Code generator for the comparison operator block.\r\n * Arduino code: loop { X operator Y }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['logic_compare'] = function (block) {\r\n  var OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>='\r\n  };\r\n  var operator = OPERATORS[block.getFieldValue('OP')];\r\n  var order = (operator == '==' || operator == '!=') ?\r\n    Arduino.ORDER_EQUALITY : Arduino.ORDER_RELATIONAL;\r\n  var argument0 = Arduino.valueToCode(block, 'A', order) || '0';\r\n  var argument1 = Arduino.valueToCode(block, 'B', order) || '0';\r\n  var code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n};\r\n\r\n/**\r\n * Code generator for the logic operator block.\r\n * Arduino code: loop { X operator Y }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['logic_operation'] = function (block) {\r\n  var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';\r\n  var order = (operator == '&&') ? Arduino.ORDER_LOGICAL_AND :\r\n    Arduino.ORDER_LOGICAL_OR;\r\n  var argument0 = Arduino.valueToCode(block, 'A', order) || 'false';\r\n  var argument1 = Arduino.valueToCode(block, 'B', order) || 'false';\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    var defaultArgument = (operator == '&&') ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  var code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n};\r\n\r\n/**\r\n * Code generator for the logic negate operator.\r\n * Arduino code: loop { !X }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['logic_negate'] = function (block) {\r\n  var order = Arduino.ORDER_UNARY_PREFIX;\r\n  var argument0 = Arduino.valueToCode(block, 'BOOL', order) || 'false';\r\n  var code = '!' + argument0;\r\n  return [code, order];\r\n};\r\n\r\n/**\r\n * Code generator for the boolean values true and false.\r\n * Arduino code: loop { true/false }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['logic_boolean'] = function (block) {\r\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\r\n  return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\n/**\r\n * Code generator for the null value.\r\n * Arduino code: loop { X ? Y : Z }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['logic_null'] = function (block) {\r\n  var code = 'NULL';\r\n  return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\n/**\r\n * Code generator for the ternary operator.\r\n * Arduino code: loop { NULL }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n *\r\n * TODO: Check types of THEN and ELSE blocks and add warning to this block if\r\n *       they are different from each other.\r\n */\r\nArduino['logic_ternary'] = function (block) {\r\n  var valueIf = Arduino.valueToCode(block, 'IF',\r\n    Arduino.ORDER_CONDITIONAL) || 'false';\r\n  var valueThen = Arduino.valueToCode(block, 'THEN',\r\n    Arduino.ORDER_CONDITIONAL) || 'null';\r\n  var valueElse = Arduino.valueToCode(block, 'ELSE',\r\n    Arduino.ORDER_CONDITIONAL) || 'null';\r\n  var code = valueIf + ' ? ' + valueThen + ' : ' + valueElse;\r\n  return [code, Arduino.ORDER_CONDITIONAL];\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for loops blocks.\r\n */\r\n 'use strict';\r\n\r\n\r\ngoog.module('Blockly.Arduino.loops');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\nconst {NameType} = goog.require('Blockly.Names');\r\n\r\n/**\r\n * Generator for the repeat block (number in a drop down) using a For loop\r\n * statement.\r\n * Arduino code: loop { for (int count = 0; count < X; count++) { Y } }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_repeat'] = function(block) {\r\n  var repeats = Number(block.getFieldValue('TIMES'));\r\n  var branch = Arduino.statementToCode(block, 'DO');\r\n  branch = Arduino.addLoopTrap(branch, block.id);\r\n  var loopVar = Arduino.nameDB_.getDistinctName('count', NameType.VARIABLE);\r\n  var code = 'for (int ' + loopVar + ' = 0; ' +\r\n      loopVar + ' < ' + repeats + '; ' +\r\n      loopVar + '++) {\\n' +\r\n      branch + '}\\n';\r\n  return code;\r\n};\r\n\r\n/**\r\n * Generator for the repeat block (using external number block) using a\r\n * For loop statement.\r\n * Arduino code: loop { for (int count = 0; count < X; count++) { Y } }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_repeat_ext'] = function(block) {\r\n  var repeats = Arduino.valueToCode(block, 'TIMES',\r\n      Arduino.ORDER_ADDITIVE) || '0';\r\n  var branch = Arduino.statementToCode(block, 'DO');\r\n  branch = Arduino.addLoopTrap(branch, block.id);\r\n  var code = '';\r\n  var loopVar = Arduino.nameDB_.getDistinctName(\r\n      'count', NameType.VARIABLE);\r\n  var endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\r\n    var endVar = Arduino.nameDB_.getDistinctName(\r\n        'repeat_end', NameType.VARIABLE);\r\n    code += 'int ' + endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code += 'for (int ' + loopVar + ' = 0; ' +\r\n      loopVar + ' < ' + endVar + '; ' +\r\n      loopVar + '++) {\\n' +\r\n      branch + '}\\n';\r\n  return code;\r\n};\r\n\r\nArduino['controls_repeat_forever'] = function(block) {\r\n  var branch = Arduino.statementToCode(block, 'DO');\r\n  branch = Arduino.addLoopTrap(branch, block.id);\r\n  return 'while (true) {\\n' + branch + '}\\n';\r\n};\r\n\r\n/**\r\n * Generator for the repeat while block using a While statement.\r\n * Arduino code: loop { while (X) { Y } }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_whileUntil'] = function(block) {\r\n  // Do while/until loop.\r\n  var until = block.getFieldValue('MODE') == 'UNTIL';\r\n  var argument0 = Arduino.valueToCode(block, 'BOOL',\r\n      until ? Arduino.ORDER_LOGICAL_OR :\r\n      Arduino.ORDER_NONE) || 'false';\r\n  var branch = Arduino.statementToCode(block, 'DO');\r\n  branch = Arduino.addLoopTrap(branch, block.id);\r\n  if (until) {\r\n    if (!argument0.match(/^\\w+$/)) {\r\n      argument0 = '(' + argument0 + ')';\r\n    }\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n};\r\n\r\n/**\r\n * Generator for the For loop statements.\r\n * Arduino code: loop { for (i = X; i <= Y; i+=Z) { } }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_for'] = function(block) {\r\n  var variable0 = Arduino.nameDB_.getName(\r\n      block.getFieldValue('VAR'), NameType.VARIABLE);\r\n  var argument0 = Arduino.valueToCode(block, 'FROM',\r\n      Arduino.ORDER_ASSIGNMENT) || '0';\r\n  var argument1 = Arduino.valueToCode(block, 'TO',\r\n      Arduino.ORDER_ASSIGNMENT) || '0';\r\n  var increment = Arduino.valueToCode(block, 'BY',\r\n      Arduino.ORDER_ASSIGNMENT) || '1';\r\n  var branch = Arduino.statementToCode(block, 'DO');\r\n  branch = Arduino.addLoopTrap(branch, block.id);\r\n  var code;\r\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\r\n      Blockly.isNumber(increment)) {\r\n    // All arguments are simple numbers.\r\n    var up = parseFloat(argument0) <= parseFloat(argument1);\r\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\r\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\r\n        variable0;\r\n    var step = Math.abs(parseFloat(increment));\r\n    if (step == 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    var startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\r\n      var startVar = Arduino.nameDB_.getDistinctName(\r\n          variable0 + '_start', NameType.VARIABLE);\r\n      code += 'int ' + startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    var endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\r\n      var endVar = Arduino.nameDB_.getDistinctName(\r\n          variable0 + '_end', NameType.VARIABLE);\r\n      code += 'int ' + endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    var incVar = Arduino.nameDB_.getDistinctName(\r\n        variable0 + '_inc', NameType.VARIABLE);\r\n    code += 'int ' + incVar + ' = ';\r\n    if (Blockly.isNumber(increment)) {\r\n      code += Math.abs(increment) + ';\\n';\r\n    } else {\r\n      code += 'abs(' + increment + ');\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += Arduino.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code += 'for (' + variable0 + ' = ' + startVar + ';\\n' +\r\n        '     ' + incVar + ' >= 0 ? ' +\r\n        variable0 + ' <= ' + endVar + ' : ' +\r\n        variable0 + ' >= ' + endVar + ';\\n' +\r\n        '     ' + variable0 + ' += ' + incVar + ') {\\n' +\r\n        branch + '}\\n';\r\n  }\r\n  return code;\r\n};\r\n\r\n/**\r\n * A \"for each\" block.\r\n * TODO: Removed for now from toolbox as lists are not yet implemented.\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_forEach'] = Arduino.noGeneratorCodeLine;\r\n\r\n/**\r\n * Generator for the loop flow control statements.\r\n * Arduino code: loop { break;/continue; }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['controls_flow_statements'] = function(block) {\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return 'break;\\n';\r\n    case 'CONTINUE':\r\n      return 'continue;\\n';\r\n  }\r\n  throw 'Unknown flow statement.';\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for maths blocks.\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino.math');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\nconst {NameType} = goog.require('Blockly.Names');\r\n\r\n\r\n/**\r\n * Generator for a numeric value (X).\r\n * Arduino code: loop { X }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_number'] = function (block) {\r\n    // Numeric value.\r\n    var code = parseFloat(block.getFieldValue('NUM'));\r\n    if (code == Infinity) {\r\n        code = 'INFINITY';\r\n    } else if (code == -Infinity) {\r\n        code = '-INFINITY';\r\n    }\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\n/**\r\n * Generator for a basic arithmetic operators (X and Y) and power function\r\n * (X ^ Y).\r\n * Arduino code: loop { X operator Y }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_arithmetic'] = function (block) {\r\n    var OPERATORS = {\r\n        ADD: [' + ', Arduino.ORDER_ADDITIVE],\r\n        MINUS: [' - ', Arduino.ORDER_ADDITIVE],\r\n        MULTIPLY: [' * ', Arduino.ORDER_MULTIPLICATIVE],\r\n        DIVIDE: [' / ', Arduino.ORDER_MULTIPLICATIVE],\r\n        POWER: [null, Arduino.ORDER_NONE]  // Handle power separately.\r\n    };\r\n    var tuple = OPERATORS[block.getFieldValue('OP')];\r\n    var operator = tuple[0];\r\n    var order = tuple[1];\r\n    var argument0 = Arduino.valueToCode(block, 'A', order) || '0';\r\n    var argument1 = Arduino.valueToCode(block, 'B', order) || '0';\r\n    var code;\r\n    // Power in C++ requires a special case since it has no operator.\r\n    if (!operator) {\r\n        code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\r\n        return [code, Arduino.ORDER_UNARY_POSTFIX];\r\n    }\r\n    code = argument0 + operator + argument1;\r\n    return [code, order];\r\n};\r\n\r\n/**\r\n * Generator for math operators that contain a single operand (X).\r\n * Arduino code: loop { operator(X) }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_single'] = function (block) {\r\n    var operator = block.getFieldValue('OP');\r\n    var code;\r\n    var arg;\r\n    if (operator == 'NEG') {\r\n        // Negation is a special case given its different operator precedents.\r\n        arg = Arduino.valueToCode(block, 'NUM',\r\n            Arduino.ORDER_UNARY_PREFIX) || '0';\r\n        if (arg[0] == '-') {\r\n            // --3 is not legal in C++ in this context.\r\n            arg = ' ' + arg;\r\n        }\r\n        code = '-' + arg;\r\n        return [code, Arduino.ORDER_UNARY_PREFIX];\r\n    }\r\n    if (operator == 'ABS' || operator.substring(0, 5) == 'ROUND') {\r\n        arg = Arduino.valueToCode(block, 'NUM',\r\n            Arduino.ORDER_UNARY_POSTFIX) || '0';\r\n    } else if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\r\n        arg = Arduino.valueToCode(block, 'NUM',\r\n            Arduino.ORDER_MULTIPLICATIVE) || '0';\r\n    } else {\r\n        arg = Arduino.valueToCode(block, 'NUM',\r\n            Arduino.ORDER_NONE) || '0';\r\n    }\r\n    // First, handle cases which generate values that don't need parentheses.\r\n    switch (operator) {\r\n        case 'ABS':\r\n            code = 'abs(' + arg + ')';\r\n            break;\r\n        case 'ROOT':\r\n            code = 'sqrt(' + arg + ')';\r\n            break;\r\n        case 'LN':\r\n            code = 'log(' + arg + ')';\r\n            break;\r\n        case 'EXP':\r\n            code = 'exp(' + arg + ')';\r\n            break;\r\n        case 'POW10':\r\n            code = 'pow(10,' + arg + ')';\r\n            break;\r\n        case 'ROUND':\r\n            code = 'round(' + arg + ')';\r\n            break;\r\n        case 'ROUNDUP':\r\n            code = 'ceil(' + arg + ')';\r\n            break;\r\n        case 'ROUNDDOWN':\r\n            code = 'floor(' + arg + ')';\r\n            break;\r\n        case 'SIN':\r\n            code = 'sin(' + arg + ' / 180 * M_PI)';\r\n            break;\r\n        case 'COS':\r\n            code = 'cos(' + arg + ' / 180 * M_PI)';\r\n            break;\r\n        case 'TAN':\r\n            code = 'tan(' + arg + ' / 180 * M_PI)';\r\n            break;\r\n    }\r\n    if (code) {\r\n        return [code, Arduino.ORDER_UNARY_POSTFIX];\r\n    }\r\n    // Second, handle cases which generate values that may need parentheses.\r\n    switch (operator) {\r\n        case 'LOG10':\r\n            code = 'log(' + arg + ') / log(10)';\r\n            break;\r\n        case 'ASIN':\r\n            code = 'asin(' + arg + ') / M_PI * 180';\r\n            break;\r\n        case 'ACOS':\r\n            code = 'acos(' + arg + ') / M_PI * 180';\r\n            break;\r\n        case 'ATAN':\r\n            code = 'atan(' + arg + ') / M_PI * 180';\r\n            break;\r\n        default:\r\n            throw 'Unknown math operator: ' + operator;\r\n    }\r\n    return [code, Arduino.ORDER_MULTIPLICATIVE];\r\n};\r\n\r\n/**\r\n * Generator for math constants (PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2),\r\n * INFINITY).\r\n * Arduino code: loop { constant }\r\n * TODO: Might need to include \"#define _USE_MATH_DEFINES\"\r\n *       The arduino header file already includes math.h\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['math_constant'] = function (block) {\r\n    var CONSTANTS = {\r\n        'PI': ['M_PI', Arduino.ORDER_UNARY_POSTFIX],\r\n        'E': ['M_E', Arduino.ORDER_UNARY_POSTFIX],\r\n        'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Arduino.ORDER_MULTIPLICATIVE],\r\n        'SQRT2': ['M_SQRT2', Arduino.ORDER_UNARY_POSTFIX],\r\n        'SQRT1_2': ['M_SQRT1_2', Arduino.ORDER_UNARY_POSTFIX],\r\n        'INFINITY': ['INFINITY', Arduino.ORDER_ATOMIC]\r\n    };\r\n    return CONSTANTS[block.getFieldValue('CONSTANT')];\r\n};\r\n\r\n/**\r\n * Generator for math checks: if a number is even, odd, prime, whole, positive,\r\n * negative, or if it is divisible by certain number. Returns true or false.\r\n * Arduino code: complex code, can create external functions.\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_number_property'] = function (block) {\r\n    var number_to_check = Arduino.valueToCode(block, 'NUMBER_TO_CHECK',\r\n        Arduino.ORDER_MULTIPLICATIVE) || '0';\r\n    var dropdown_property = block.getFieldValue('PROPERTY');\r\n    var code;\r\n    if (dropdown_property == 'PRIME') {\r\n        var func = [\r\n            'boolean ' + Arduino.DEF_FUNC_NAME + '(int n) {',\r\n            '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\r\n            '  if (n == 2 || n == 3) {',\r\n            '    return true;',\r\n            '  }',\r\n            '  // False if n is NaN, negative, is 1.',\r\n            '  // And false if n is divisible by 2 or 3.',\r\n            '  if (isnan(n) || (n <= 1) || (n == 1) || (n % 2 == 0) || ' +\r\n            '(n % 3 == 0)) {',\r\n            '    return false;',\r\n            '  }',\r\n            '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\r\n            '  for (int x = 6; x <= sqrt(n) + 1; x += 6) {',\r\n            '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',\r\n            '      return false;',\r\n            '    }',\r\n            '  }',\r\n            '  return true;',\r\n            '}'];\r\n        var funcName = Arduino.addFunction('mathIsPrime', func.join('\\n'));\r\n        Arduino.addInclude('math', '#include <math.h>');\r\n        code = funcName + '(' + number_to_check + ')';\r\n        return [code, Arduino.ORDER_UNARY_POSTFIX];\r\n    }\r\n    switch (dropdown_property) {\r\n        case 'EVEN':\r\n            code = number_to_check + ' % 2 == 0';\r\n            break;\r\n        case 'ODD':\r\n            code = number_to_check + ' % 2 == 1';\r\n            break;\r\n        case 'WHOLE':\r\n            Arduino.addInclude('math', '#include <math.h>');\r\n            code = '(floor(' + number_to_check + ') == ' + number_to_check + ')';\r\n            break;\r\n        case 'POSITIVE':\r\n            code = number_to_check + ' > 0';\r\n            break;\r\n        case 'NEGATIVE':\r\n            code = number_to_check + ' < 0';\r\n            break;\r\n        case 'DIVISIBLE_BY':\r\n            var divisor = Arduino.valueToCode(block, 'DIVISOR',\r\n                Arduino.ORDER_MULTIPLICATIVE) || '0';\r\n            code = number_to_check + ' % ' + divisor + ' == 0';\r\n            break;\r\n    }\r\n    return [code, Arduino.ORDER_EQUALITY];\r\n};\r\n\r\n/**\r\n * Generator to add (Y) to a variable (X).\r\n * If variable X has not been declared before this block it will be declared as\r\n * a (not initialised) global int, however globals are 0 initialised in C/C++.\r\n * Arduino code: loop { X += Y; }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_change'] = function (block) {\r\n    var argument0 = Arduino.valueToCode(block, 'DELTA',\r\n        Arduino.ORDER_ADDITIVE) || '0';\r\n    var varName = Arduino.nameDB_.getName(\r\n        block.getFieldValue('VAR'), NameType.VARIABLE);\r\n    return varName + ' += ' + argument0 + ';\\n';\r\n};\r\n\r\n/** Rounding functions have a single operand. */\r\nArduino['math_round'] = Arduino['math_single'];\r\n\r\n/** Trigonometry functions have a single operand. */\r\nArduino['math_trig'] = Arduino['math_single'];\r\n\r\n/**\r\n * Generator for the math function to a list.\r\n * Arduino code: ???\r\n * TODO: List have to be implemented first. Removed from toolbox for now.\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_on_list'] = Arduino.noGeneratorCodeInline;\r\n\r\n/**\r\n * Generator for the math modulo function (calculates remainder of X/Y).\r\n * Arduino code: loop { X % Y }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_modulo'] = function (block) {\r\n    var argument0 = Arduino.valueToCode(block, 'DIVIDEND',\r\n        Arduino.ORDER_MULTIPLICATIVE) || '0';\r\n    var argument1 = Arduino.valueToCode(block, 'DIVISOR',\r\n        Arduino.ORDER_MULTIPLICATIVE) || '0';\r\n    var code = argument0 + ' % ' + argument1;\r\n    return [code, Arduino.ORDER_MULTIPLICATIVE];\r\n};\r\n\r\n/**\r\n * Generator for clipping a number(X) between two limits (Y and Z).\r\n * Arduino code: loop { (X < Y ? Y : ( X > Z ? Z : X)) }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_constrain'] = function (block) {\r\n    // Constrain a number between two limits.\r\n    var argument0 = Arduino.valueToCode(block, 'VALUE',\r\n        Arduino.ORDER_NONE) || '0';\r\n    var argument1 = Arduino.valueToCode(block, 'LOW',\r\n        Arduino.ORDER_NONE) || '0';\r\n    var argument2 = Arduino.valueToCode(block, 'HIGH',\r\n        Arduino.ORDER_NONE) || '0';\r\n    var code = '(' + argument0 + ' < ' + argument1 + ' ? ' + argument1 +\r\n        ' : ( ' + argument0 + ' > ' + argument2 + ' ? ' + argument2 + ' : ' +\r\n        argument0 + '))';\r\n    return [code, Arduino.ORDER_UNARY_POSTFIX];\r\n};\r\n\r\n/**\r\n * Generator for a random integer between two numbers (X and Y).\r\n * Arduino code: loop { math_random_int(X, Y); }\r\n *               and an aditional math_random_int function\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\nArduino['math_random_int'] = function (block) {\r\n    var argument0 = Arduino.valueToCode(block, 'FROM',\r\n        Arduino.ORDER_NONE) || '0';\r\n    var argument1 = Arduino.valueToCode(block, 'TO',\r\n        Arduino.ORDER_NONE) || '0';\r\n    var functionName = Arduino.nameDB_.getDistinctName(\r\n        'math_random_int', Blockly.Generator.NAME_TYPE);\r\n    Arduino.math_random_int.random_function = functionName;\r\n    var func = [\r\n        'int ' + Arduino.DEF_FUNC_NAME + '(int min, int max) {',\r\n        '  if (min > max) {',\r\n        '    // Swap min and max to ensure min is smaller.',\r\n        '    int temp = min;',\r\n        '    min = max;',\r\n        '    max = temp;',\r\n        '  }',\r\n        '  return min + (rand() % (max - min + 1));',\r\n        '}'];\r\n    var funcName = Arduino.addFunction('mathRandomInt', func.join('\\n'));\r\n    var code = funcName + '(' + argument0 + ', ' + argument1 + ')';\r\n    return [code, Arduino.ORDER_UNARY_POSTFIX];\r\n};\r\n\r\n/**\r\n * Generator for a random float from 0 to 1.\r\n * Arduino code: loop { (rand() / RAND_MAX) }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {string} Completed code.\r\n */\r\nArduino['math_random_float'] = function (block) {\r\n    return ['(rand() / RAND_MAX)', Arduino.ORDER_UNARY_POSTFIX];\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Arduino blocks.\r\n */\r\n 'use strict';\r\n\r\ngoog.module('Blockly.Arduino.arduino');\r\n \r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n \r\n\r\nArduino['time_delay'] = function (block) {\r\n    var delayTime = Arduino.valueToCode(\r\n        block, 'DELAY_TIME_MILI', Arduino.ORDER_ATOMIC) || '0';\r\n    var code = 'delay(' + delayTime + ');\\n';\r\n    return code;  \r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Leaphy Extra blocks.\r\n */\r\n 'use strict';\r\n\r\ngoog.module('Blockly.Arduino.leaphyExtra');\r\n \r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n\r\nvar includeDefinition = '#include \"Adafruit_TCS34725.h\"';\r\nvar variablesDefinition = 'Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_16X);\\nuint16_t RawColor_Red, RawColor_Green, RawColor_Blue, RawColor_Clear;\\nbyte Color_Red, Color_Green, Color_Blue, Color_Clear;\\n';\r\nvar getColorDefinition = 'double getColor(int colorCode, bool isRaw) {\\n'\r\n                            + '  tcs.getRawData(&RawColor_Red, &RawColor_Green, &RawColor_Blue, &RawColor_Clear);\\n'\r\n                            + '  Color_Red = min(RawColor_Red/5,255); Color_Green = min(RawColor_Green/5,255); Color_Blue = min(RawColor_Blue/5,255);\\n'\r\n                            + '  switch(colorCode) {\\n'\r\n                            + '    case 0:\\n'\r\n                            + '      return (isRaw) ? RawColor_Red : Color_Red;\\n'\r\n                            + '    case 1:\\n'\r\n                            + '      return (isRaw) ? RawColor_Green : Color_Green;\\n'\r\n                            + '    case 2:\\n'\r\n                            + '      return (isRaw) ? RawColor_Blue : Color_Blue;\\n'\r\n                            + '  }\\n'\r\n                            + '}\\n';\r\n\r\nvar rgbColorSetupCode = 'if (tcs.begin()) {\\n    Serial.println(\"RGB-sensor gevonden!\");\\n  } else {\\n    Serial.println(\"Geen RGB-sensor gevonden... check je verbindingen...\");\\n  }';\r\n\r\nArduino['leaphy_rgb_color'] = function (block) {\r\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\r\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\r\n    Arduino.definitions_['define_get_color'] = getColorDefinition;\r\n    Arduino.addSetup('rgb_color_setup', rgbColorSetupCode, false);\r\n\r\n    var colorType = block.getFieldValue('COLOR_TYPE');\r\n    var code = 'getColor(' + colorType + ', false)';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_rgb_color_raw'] = function (block) {\r\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\r\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\r\n    Arduino.definitions_['define_get_color'] = getColorDefinition;\r\n    Arduino.addSetup('rgb_color_setup', rgbColorSetupCode, false);\r\n\r\n    var colorType = block.getFieldValue('COLOR_TYPE_RAW');\r\n    var code = 'getColor(' + colorType + ', true)';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_rgb_raw_color_red'] = function (block) {\r\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\r\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\r\n    var code = 'RawColor_Red';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_rgb_raw_color_green'] = function (block) {\r\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\r\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\r\n    var code = 'RawColor_Green';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_rgb_raw_color_blue'] = function (block) {\r\n    Arduino.definitions_['define_leaphy_rgb'] = includeDefinition;\r\n    Arduino.definitions_['define_leaphy_rgb_var'] = variablesDefinition;\r\n    var code = 'RawColor_Blue';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_led_set_strip'] = function (block) {\r\n    var pin = Arduino.valueToCode(this, 'LED_SET_PIN', Arduino.ORDER_ATOMIC) || '0'\r\n    var leds = Arduino.valueToCode(this, 'LED_SET_LEDS', Arduino.ORDER_ATOMIC) || '0'\r\n    Arduino.definitions_['define_led_lib'] = '#include \"ledstrip.h\"';\r\n    Arduino.definitions_['define_leds_pins'] = 'LEDSTRIP ledstrip(' + pin + ', ' + leds + ');';\r\n    var code = '';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_led_set_basic'] = function (block) {\r\n    var led = Arduino.valueToCode(this, 'LED_BASIC_LED', Arduino.ORDER_ATOMIC) || '0'\r\n    var red = Arduino.valueToCode(this, 'LED_BASIC_RED', Arduino.ORDER_ATOMIC) || '0'\r\n    var green = Arduino.valueToCode(this, 'LED_BASIC_GREEN', Arduino.ORDER_ATOMIC) || '0'\r\n    var blue = Arduino.valueToCode(this, 'LED_BASIC_BLUE', Arduino.ORDER_ATOMIC) || '0'\r\n    var code = 'ledstrip.basis(' + led + ', ' + red + ', ' + green + ', ' + blue + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_led_set_speed'] = function (block) {\r\n    var speedValue = Arduino.valueToCode(this, 'LED_SET_SPEEDVALUE', Arduino.ORDER_ATOMIC) || '0'\r\n    var code = '_snelHeid = ' + speedValue + ';\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_led_strip_demo'] = function (block) {\r\n    var dropdownType = block.getFieldValue('DEMO_TYPE');\r\n    var red = Arduino.valueToCode(this, 'LED_STRIP_DEMO_RED', Arduino.ORDER_ATOMIC) || '0'\r\n    var green = Arduino.valueToCode(this, 'LED_STRIP_DEMO_GREEN', Arduino.ORDER_ATOMIC) || '0'\r\n    var blue = Arduino.valueToCode(this, 'LED_STRIP_DEMO_BLUE', Arduino.ORDER_ATOMIC) || '0'\r\n    var code = 'ledstrip.runFunction(' + dropdownType + ', ' + red + ', ' + green + ', ' + blue + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_servo_write'] = function (block) {\r\n    var pinKey = block.getFieldValue('SERVO_PIN');\r\n    var servoAngle = Arduino.valueToCode(\r\n        block, 'SERVO_ANGLE', Arduino.ORDER_ATOMIC) || '90';\r\n    var servoName = 'myServo' + pinKey;\r\n\r\n    Arduino.reservePin(\r\n        block, pinKey, Arduino.PinTypes.SERVO, 'Servo Write');\r\n\r\n    Arduino.addInclude('servo', '#include <Servo.h>');\r\n    Arduino.addDeclaration('servo_' + pinKey, 'Servo ' + servoName + ';');\r\n\r\n    var setupCode = servoName + '.attach(' + pinKey + ');';\r\n    Arduino.addSetup('servo_' + pinKey, setupCode, true);\r\n\r\n    var code = servoName + '.write(' + servoAngle + ');\\n';\r\n    return code;\r\n};\r\n\r\n/**\r\n * Code generator to read an angle value from a servo pin (X).\r\n * Arduino code: #include <Servo.h>\r\n *               Servo myServoX;\r\n *               setup { myServoX.attach(X); }\r\n *               loop  { myServoX.read();    }\r\n * @param {!Blockly.Block} block Block to generate the code from.\r\n * @return {array} Completed code with order of operation.\r\n */\r\n\r\nArduino['leaphy_servo_read'] = function (block) {\r\n    var pinKey = block.getFieldValue('SERVO_PIN');\r\n    var servoName = 'myServo' + pinKey;\r\n\r\n    Arduino.reservePin(\r\n        block, pinKey, Arduino.PinTypes.SERVO, 'Servo Read');\r\n\r\n    Arduino.addInclude('servo', '#include <Servo.h>');\r\n    Arduino.addDeclaration('servo_' + pinKey, 'Servo ' + servoName + ';');\r\n\r\n    var setupCode = servoName + '.attach(' + pinKey + ');';\r\n    Arduino.addSetup('servo_' + pinKey, setupCode, true);\r\n\r\n    var code = servoName + '.read()';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_io_digitalwrite'] = function (block) {\r\n    var pin = block.getFieldValue('PIN');\r\n    var stateOutput = Arduino.valueToCode(\r\n        block, 'STATE', Arduino.ORDER_ATOMIC) || 'LOW';\r\n\r\n    Arduino.reservePin(\r\n        block, pin, Arduino.PinTypes.OUTPUT, 'Digital Write');\r\n\r\n    var pinSetupCode = 'pinMode(' + pin + ', OUTPUT);';\r\n    Arduino.addSetup('io_' + pin, pinSetupCode, false);\r\n\r\n    var code = 'digitalWrite(' + pin + ', ' + stateOutput + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_io_analogwrite'] = function (block) {\r\n    var pin = block.getFieldValue('PIN');\r\n    var stateOutput = Arduino.valueToCode(\r\n        block, 'NUM', Arduino.ORDER_ATOMIC) || '0';\r\n\r\n    Arduino.reservePin(\r\n        block, pin, Arduino.PinTypes.OUTPUT, 'Analogue Write');\r\n\r\n    var pinSetupCode = 'pinMode(' + pin + ', OUTPUT);';\r\n    Arduino.addSetup('io_' + pin, pinSetupCode, false);\r\n\r\n    // Warn if the input value is out of range\r\n    if ((stateOutput < 0) || (stateOutput > 255)) {\r\n        block.setWarningText('The analogue value set must be between 0 and 255',\r\n            'pwm_value');\r\n    } else {\r\n        block.setWarningText(null, 'pwm_value');\r\n    }\r\n\r\n    var code = 'analogWrite(' + pin + ', ' + stateOutput + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_sonar_read'] = function (block) {\r\n    Arduino.addInclude('leaphy_extra', '#include \"Leaphy_Extra.h\"');\r\n    var trigPin = block.getFieldValue('TRIG_PIN');\r\n    var echoPin = block.getFieldValue('ECHO_PIN');\r\n    var code = 'getDistanceSonar(' + trigPin + ', ' + echoPin + ')';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nvar displayInclude = '#include \"OLED_Display.h\"';\r\nvar displayDefinition = 'OLEDDISPLAY display;';\r\nvar displaySetup = 'if(!display.begin())\\n  {\\n    Serial.println(F(\"Contact with the display failed: Check the connections\"));\\n  }\\n';\r\nvar displaySerialSetup = 'Serial.begin(115200);';\r\n\r\nvar addDisplaySetupCode = function(){\r\n    Arduino.addInclude('include_display', displayInclude);\r\n    Arduino.definitions_['define_display'] = displayDefinition;\r\n    Arduino.addSetup('serial', displaySerialSetup, false);\r\n    Arduino.addSetup('oled', displaySetup, false);\r\n}\r\n\r\nArduino['leaphy_display_clear'] = function(block) {\r\n    addDisplaySetupCode();\r\n    var code = 'display.clearDisplay();\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_display_print_line'] = function(block) {\r\n    addDisplaySetupCode();\r\n\r\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\r\n    var row = Arduino.valueToCode(this, 'DISPLAY_ROW', Arduino.ORDER_ATOMIC) || '0';\r\n    var row = block.getFieldValue('DISPLAY_ROW');\r\n    var cursorHeight = row * 12;\r\n    var code = 'display.setCursor(0,' + cursorHeight + ');\\ndisplay.println(' + value + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_display_print_value'] = function(block) {\r\n    addDisplaySetupCode();\r\n\r\n    var name = Arduino.valueToCode(this, 'NAME', Arduino.ORDER_ATOMIC) || '0';\r\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\r\n    var row = block.getFieldValue('DISPLAY_ROW');\r\n    var cursorHeight = row * 12;\r\n    var code = 'display.setCursor(0,' + cursorHeight + ');\\ndisplay.print(' + name + ');\\ndisplay.print(\" = \");\\ndisplay.println(' + value + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_display_display'] = function(block) {\r\n    addDisplaySetupCode();\r\n    var code = 'display.display();\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_update_lsm9ds1'] = function(block) {\r\n    return \"  lsm.read();  /* ask it to read in the data */  \\n \\n  /* Get a new sensor event */  \\n  sensors_event_t a, m, g, temp; \\n \\n  lsm.getEvent(&a, &m, &g, &temp);\"\r\n}\r\n\r\nArduino['leaphy_use_lsm9ds1'] = function(block) {\r\n    var sensor = block.getFieldValue('SENSOR');\r\n    var axis = block.getFieldValue('AXIS');\r\n    Arduino.addInclude('adafruit_lsm9ds1', '#include <Adafruit_LSM9DS1.h>');\r\n    Arduino.addDeclaration('lsm9ds1_declaration', 'Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();\\n');\r\n    Arduino.addFunction('lsm9ds1_setttings', 'void setupSettings()\\n{\\n    lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);\\n    lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);\\n    lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);\\n}\\n');\r\n    Arduino.addSetup(\"lsm9ds1_setup', 'void setup()  \\n{ \\n  Serial.begin(115200); \\n \\n  while (!Serial) { \\n    delay(1); // will pause Zero, Leonardo, etc until serial console opens \\n  } \\n   \\n  Serial.println('LSM9DS1 data read demo'); \\n   \\n  // Try to initialise and warn if we couldn't detect the chip \\n  if (!lsm.begin()) \\n  { \\n    Serial.println('Oops ... unable to initialize the LSM9DS1. Check your wiring!'); \\n    while (1); \\n  } \\n  Serial.println('Found LSM9DS1 9DOF'); \\n \\n  // helper to just set the default scaling we want, see above! \\n  setupSensor(); \\n}\");\r\n    return [sensor + axis, Arduino.ORDER_ATOMIC]\r\n}","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Leaphy Flitz blocks.\r\n */\r\n 'use strict';\r\n\r\ngoog.module('Blockly.Arduino.leaphyFlitz');\r\n \r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n \r\n\r\nArduino['leaphy_flitz_read_stomach_sensor'] = function (block){\r\n    var sensorType = block.getFieldValue('SENSOR_TYPE');\r\n    var code = '';\r\n    var setup = '';\r\n    if(sensorType == \"1\"){\r\n        setup = 'pinMode(8, OUTPUT);\\n  pinMode(9, OUTPUT);\\n  pinMode(10, INPUT);\\n  digitalWrite(8, LOW);\\n  digitalWrite(9, HIGH);\\n'    \r\n        code = 'digitalRead(10)'\r\n    } else if(sensorType == \"2\"){\r\n        setup = 'pinMode(8, INPUT);\\n  pinMode(9, OUTPUT);\\n  pinMode(10, OUTPUT);\\n  digitalWrite(8, LOW);\\n  digitalWrite(9, HIGH);\\n'\r\n        code = 'digitalRead(8)'\r\n    }\r\n    Arduino.setups_['setup_flitz_stomach'] = setup;    \r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_flitz_read_hand_sensor'] = function (block){\r\n    Arduino.setups_['setup_flitz_stomach'] = 'pinMode(14, OUTPUT);\\n pinMode(15, OUTPUT);\\n pinMode(2, INPUT);\\n digitalWrite(14, HIGH);\\n digitalWrite(15, LOW);\\n'\r\n    var code = 'analogRead(2)'\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_flitz_led'] = function (block){\r\n    Arduino.setups_['setup_flitz_led'] = ''\r\n    var flitz_red = Arduino.valueToCode(this, 'FLITZ_LED_R', Arduino.ORDER_ATOMIC) || '0'\r\n    var flitz_green = Arduino.valueToCode(this, 'FLITZ_LED_G', Arduino.ORDER_ATOMIC) || '0'\r\n    var flitz_blue = Arduino.valueToCode(this, 'FLITZ_LED_B', Arduino.ORDER_ATOMIC) || '0' \r\n    //var code = 'setLedd(' + flitz_red + ', ' + flitz_green + ', ' + flitz_blue + ');\\n';\r\n    var code = 'analogWrite(3, ' + flitz_red + ');\\nanalogWrite(5, ' + flitz_green + ');\\nanalogWrite(6, ' + flitz_blue + ');\\n';\r\n    return code;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Leaphy Click blocks.\r\n */\r\n 'use strict';\r\n\r\ngoog.module('Blockly.Arduino.leaphyClick');\r\n \r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n\r\nArduino['leaphy_click_rgb_digitalwrite'] = function (block) {\r\n    var pin1 = block.getFieldValue('PIN1');\r\n    var state1Output = Arduino.valueToCode(\r\n        block, 'STATE1', Arduino.ORDER_ATOMIC) || 'LOW';\r\n\r\n    Arduino.reservePin(\r\n        block, pin1, Arduino.PinTypes.OUTPUT, 'Digital Write');\r\n\r\n    var pin1SetupCode = 'pinMode(' + pin1 + ', OUTPUT);';\r\n    Arduino.addSetup('io_' + pin1, pin1SetupCode, false);\r\n\r\n    var pin2 = block.getFieldValue('PIN2');\r\n    var state2Output = Arduino.valueToCode(\r\n        block, 'STATE2', Arduino.ORDER_ATOMIC) || 'LOW';\r\n\r\n    Arduino.reservePin(\r\n        block, pin2, Arduino.PinTypes.OUTPUT, 'Digital Write');\r\n\r\n    var pin2SetupCode = 'pinMode(' + pin2 + ', OUTPUT);';\r\n    Arduino.addSetup('io_' + pin2, pin2SetupCode, false);\r\n\r\n    var pin3 = block.getFieldValue('PIN3');\r\n    var state3Output = Arduino.valueToCode(\r\n        block, 'STATE3', Arduino.ORDER_ATOMIC) || 'LOW';\r\n\r\n    Arduino.reservePin(\r\n        block, pin3, Arduino.PinTypes.OUTPUT, 'Digital Write');\r\n\r\n    var pin3SetupCode = 'pinMode(' + pin3 + ', OUTPUT);';\r\n    Arduino.addSetup('io_' + pin3, pin3SetupCode, false);\r\n\r\n    var code = 'digitalWrite(' + pin1 + ', ' + state1Output + ');\\n'\r\n                     + 'digitalWrite(' + pin2 + ', ' + state2Output + ');\\n'\r\n                     + 'digitalWrite(' + pin3 + ', ' + state3Output + ');\\n';\r\n                     \r\n    return code;\r\n};\r\n\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Leaphy Original blocks.\r\n */\r\n 'use strict';\r\n\r\ngoog.module('Blockly.Arduino.leaphyOriginal');\r\n \r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n \r\n \r\nArduino['leaphy_original_set_led'] = function (block) {\r\n    var red = Arduino.valueToCode(this, 'LED_RED', Arduino.ORDER_ATOMIC) || '0'\r\n    var green = Arduino.valueToCode(this, 'LED_GREEN', Arduino.ORDER_ATOMIC) || '0'\r\n    var blue = Arduino.valueToCode(this, 'LED_BLUE', Arduino.ORDER_ATOMIC) || '0'\r\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\r\n    var code = 'setLed(' + red + ', ' + green + ', ' + blue + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_original_set_motor'] = function (block) {\r\n    var dropdown_Type = block.getFieldValue('MOTOR_TYPE');\r\n    var speed = Arduino.valueToCode(this, 'MOTOR_SPEED', Arduino.ORDER_ATOMIC) || '100'\r\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\r\n    var code = 'setMotor(' + dropdown_Type + ', ' + speed + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_click_set_motor'] = Arduino['leaphy_original_set_motor'];\r\n\r\nArduino['leaphy_original_get_distance'] = function (block) {\r\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\r\n    var code = 'getDistance()';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_original_move_motors'] = function (block) {\r\n    var dropdown_Type = block.getFieldValue('MOTOR_DIRECTION');\r\n    var speed = Arduino.valueToCode(this, 'MOTOR_SPEED', Arduino.ORDER_ATOMIC) || '100'\r\n    Arduino.definitions_['define_leaphy_original'] = '#include \"Leaphyoriginal1.h\"\\n';\r\n    var code = 'moveMotors(' + dropdown_Type + ', ' + speed + ');\\n';\r\n    return code;\r\n}\r\n\r\nArduino['leaphy_original_digital_read'] = function (block) {\r\n    var dropdown_pin = block.getFieldValue('PIN');\r\n    Arduino.setups_['setup_input_' + dropdown_pin] = 'pinMode(' + dropdown_pin + ', INPUT);';\r\n    var code = 'digitalRead(' + dropdown_pin + ')';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_original_analog_read'] = function (block) {\r\n    var dropdown_pin = block.getFieldValue('PIN');\r\n    //Arduino.setups_['setup_input_'+dropdown_pin] = 'pinMode('+dropdown_pin+', INPUT);';\r\n    var code = 'analogRead(' + dropdown_pin + ')';\r\n    return [code, Arduino.ORDER_ATOMIC];\r\n};\r\n\r\nArduino['leaphy_original_buzz'] = function(block) {\r\n    Arduino.addInclude('arduino', '#include <Arduino.h>');\r\n    Arduino.addSetup('tone', 'pinMode(4, OUTPUT);', false);\r\n    var frequency = Arduino.valueToCode(this, 'FREQUENCY', Arduino.ORDER_ATOMIC) || '0';\r\n    var duration = Arduino.valueToCode(this, 'DURATION', Arduino.ORDER_ATOMIC) || '0';\r\n    var code = 'tone(4, ' + frequency + ', ' + duration + ');\\n';\r\n    return code;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Generating Arduino for Leaphy Common blocks.\r\n */\r\n'use strict';\r\n\r\ngoog.module('Blockly.Arduino.leaphyCommon');\r\n\r\nconst { arduinoGenerator: Arduino } = goog.require('Blockly.Arduino');\r\n\r\n\r\n// Arduino['leaphy_start'] = function (block) {\r\n//     // Define the Start procedure\r\n//     var funcName = 'leaphyProgram';\r\n//     var branch = Arduino.statementToCode(block, 'STACK');\r\n//     if (Arduino.STATEMENT_PREFIX) {\r\n//         var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n//         branch = Arduino.prefixLines(\r\n//             Arduino.STATEMENT_PREFIX.replace(/%1/g,\r\n//                 '\\'' + id + '\\''), Arduino.INDENT) + branch;\r\n//     }\r\n//     if (Arduino.INFINITE_LOOP_TRAP) {\r\n//         branch = Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n//             '\\'' + block.id + '\\'') + branch;\r\n//     }\r\n//     var returnType = 'void';\r\n//     var code = returnType + ' ' + funcName + '() {\\n' + branch + '}';\r\n\r\n//     code = Arduino.scrub_(block, code);\r\n//     Arduino.userFunctions_[funcName] = code;\r\n//     Arduino.addSetup('userSetupCode', funcName + '();', false);\r\n//     return null;\r\n// };\r\n\r\nArduino['leaphy_start'] = function (block) {\r\n    // Define the Start procedure\r\n    var funcName = 'leaphyProgram';\r\n    var branch = Arduino.statementToCode(block, 'STACK');\r\n    if (Arduino.STATEMENT_PREFIX) {\r\n        var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\r\n        branch = Arduino.prefixLines(\r\n            Arduino.STATEMENT_PREFIX.replace(/%1/g,\r\n                '\\'' + id + '\\''), Arduino.INDENT) + branch;\r\n    }\r\n    if (Arduino.INFINITE_LOOP_TRAP) {\r\n        branch = Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,\r\n            '\\'' + block.id + '\\'') + branch;\r\n    }\r\n    var returnType = 'void';\r\n    var code = returnType + ' ' + funcName + '() {\\n' + branch + '}';\r\n\r\n    code = Arduino.scrub_(block, code);\r\n    Arduino.definitions_[funcName] = code;\r\n    Arduino.addSetup('userSetupCode', funcName + '();', false);\r\n    return null;\r\n};\r\n\r\nArduino['leaphy_serial_print_line'] = function (block) {\r\n    Arduino.addSetup('serial', 'Serial.begin(115200);', false);\r\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\r\n    var code = 'Serial.println(' + value + ');\\n';\r\n    return code;\r\n};\r\n\r\nArduino['leaphy_serial_print_value'] = function (block) {\r\n    Arduino.addSetup('serial', 'Serial.begin(115200);', false);\r\n    var name = Arduino.valueToCode(this, 'NAME', Arduino.ORDER_ATOMIC) || '0';\r\n    var value = Arduino.valueToCode(this, 'VALUE', Arduino.ORDER_ATOMIC) || '0';\r\n    var code = 'Serial.print(' + name + ');\\nSerial.print(\" = \");\\nSerial.println(' + value + ');\\n';\r\n    return code;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @fileoverview Complete helper functions for generating Arduino for\r\n *     blocks.  This is the entrypoint for Arduino_compressed.js.\r\n * @suppress {extraRequire}\r\n */\r\n 'use strict';\r\n\r\n goog.module('Blockly.Arduino.all');\r\n \r\n const moduleExports = goog.require('Blockly.Arduino');\r\n goog.require('Blockly.Arduino.leaphyCommon');\r\n goog.require('Blockly.Arduino.leaphyOriginal');\r\n goog.require('Blockly.Arduino.leaphyClick');\r\n goog.require('Blockly.Arduino.leaphyFlitz');\r\n goog.require('Blockly.Arduino.leaphyExtra');\r\n goog.require('Blockly.Arduino.arduino');\r\n goog.require('Blockly.Arduino.math');\r\n goog.require('Blockly.Arduino.loops');\r\n goog.require('Blockly.Arduino.logic');\r\n goog.require('Blockly.Arduino.variables');\r\n goog.require('Blockly.Arduino.procedures');\r\n goog.require('Blockly.Arduino.text');\r\n\r\n exports = moduleExports;\r\n \r\n "]}